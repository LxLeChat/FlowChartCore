<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Find-FLowChartNodes</command:name>
      <command:verb>Find</command:verb>
      <command:noun>FLowChartNodes</command:noun>
      <maml:description>
        <maml:para>Construit un graph des instructions contenues dans un script Powershell.</maml:para>
        <maml:para>Voici la liste instructions gérées :</maml:para>
        <maml:para>Structures de contrôle : If/Else/ElseIf, Switch, Try/Catch/Finally</maml:para>
        <maml:para>Boucles : Do Until, Do While, For, Foreach, Foreach-Object, While (Foreach -Parallel -&gt; Pas implémenté).</maml:para>
        <maml:para>Commandes de sortie de boucle : Break, Continue, Exit, Return, Throw.</maml:para>
        <maml:para>Opérateur ternaire:  ?:   -&gt; Pas implémenté.</maml:para>
        <maml:para>Opérateur d'affectation conditionnelle null : ?=   -&gt; Pas implémenté.</maml:para>
        <maml:para>Note: l'analyse des conteneurs de code n'est pas implémenté. Par exemple l'affectation d'un scriptblock à une variable, le code d'une fonction ou le scriptblock associé au cmdlet Foreach-Object</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Lorsque vous analysez un scriptblock ou un script à l'aide de Find-FlowChartNodes, la cmdlet renvoie une liste de nœuds. Par exemple, pour une instruction If le cmdlet renvoit un objet IfNode et ainsi de suite.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Find-FLowChartNodes</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>ScriptBlock</maml:name>
          <maml:Description>
            <maml:para>Code à analyser. Contient une suite d'instructions Powershell.</maml:para>
          </maml:Description>
          <command:parameterValue required="true" variableLength="false">ScriptBlock</command:parameterValue>
          <dev:type>
            <maml:name>ScriptBlock</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Find-FLowChartNodes</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:Description>
            <maml:para>Nom du chemin d'un script Powershell à analyser.</maml:para>
          </maml:Description>
          <command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
          <dev:type>
            <maml:name>String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="PSPath">
          <maml:name>LiteralPath</maml:name>
          <maml:Description>
            <maml:para>Nom du chemin littéral d'un script Powershell à analyser</maml:para>
          </maml:Description>
          <command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
          <dev:type>
            <maml:name>String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>ScriptBlock</maml:name>
        <maml:Description>
          <maml:para>Code à analyser. Contient une suite d'instructions Powershell.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">ScriptBlock</command:parameterValue>
        <dev:type>
          <maml:name>ScriptBlock</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:Description>
          <maml:para>Nom du chemin d'un script Powershell à analyser.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="PSPath">
        <maml:name>LiteralPath</maml:name>
        <maml:Description>
          <maml:para>Nom du chemin littéral d'un script Powershell à analyser</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>Scriptblock</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>FlowChartCore.Node</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------------- Analyser un scriptblock -------------------</maml:title>
        <dev:code>$Sb={
 If ( $x ) 
 {
    Foreach ( $y in $x ) 
    { "Do Something" }
 }
}
$List=Find-FlowChartNodes -Scriptblock $Sb
$List

#Condition : $x
#Name      : IfNode
#Children  : {ForeachNode}
#Parent    :
#Position  : 1
#Depth     : 0
#Id        : 01
#Graph     : {}</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Le cmdlet analyse le scriptblock et renvoi une liste de noeud. Le résultat peut être vide si le code ne contient pas d'instruction reconnue.</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------------- Afficher tous les noeuds -------------------</maml:title>
        <dev:code>$Sb={
 If ( $x ) 
 {
    Foreach ( $y in $x ) 
    { "Do Something" }
 }
}
$List=Find-FlowChartNodes -Scriptblock $Sb
$List[0].FindNodes({$args[0] -is [FlowChartCore.Node]},$true)|Select-Object Name

#Name
#----
#ForeachNode
#CodeNode</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Le cmdlet analyse le scriptblock et renvoi une liste de noeud. On recherche et affiche tous les noeuds de la liste.</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---------------------- Analyser un script ----------------------</maml:title>
        <dev:code>Find-FlowChartNodes -Path .\somescript.ps1
Get-ChildItem -Path c:\temp -Filter *.ps1 | Find-FLowChartNodes</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Le cmdlet analyse le ou les fichiers et renvoi une liste de noeud. On recherche et affiche tous les noeuds de la liste.</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Afficher tous les noms de classes dérivés de la classse 'FlowChartCore.Node'</maml:title>
        <dev:code>[FlowChartCore.Node].Assembly.ExportedTypes|
 Where-Object {$_.IsSubclassOf([FlowChartCore.Node])}|
 Select-Object Name

#Name
#----
#CodeNode
#ElseIfNode
#...</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Le code précédent affiche la liste des classes représentant un type d'instruction.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>New-FLowChartGraph</command:name>
      <command:verb>New</command:verb>
      <command:noun>FLowChartGraph</command:noun>
      <maml:description>
        <maml:para>Génére un fichier .dot (Graphviz) à partir d'un graph construit à l'aide Find-FLowChartNodes.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>La visualisation d'un graph construit par Find-FLowChartNodes se fait à l'aide de Graphviz. Cet outil tier nécessite un fichier au format .dot</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-FLowChartGraph</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
          <maml:name>Nodes</maml:name>
          <maml:Description>
            <maml:para>Listes de noeuds issue d'une analyse par Find-FlowChartNodes.</maml:para>
          </maml:Description>
          <command:parameterValue required="true" variableLength="false">System.Collections.Generic.List`1[FlowChartCore.Node]</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Generic.List`1[FlowChartCore.Node]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>CodeAsText</maml:name>
          <maml:Description>
            <maml:para>Le contenu d'un noeud correspond au code analysé. Par défaut le contenu d'un noeud de code est 'Codeblock'.</maml:para>
          </maml:Description>
          <dev:type>
            <maml:name>SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByValue)" position="0" aliases="none">
        <maml:name>Nodes</maml:name>
        <maml:Description>
          <maml:para>Listes de noeuds issue d'une analyse par Find-FlowChartNodes.</maml:para>
        </maml:Description>
        <command:parameterValue required="true" variableLength="false">System.Collections.Generic.List`1[FlowChartCore.Node]</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Generic.List`1[FlowChartCore.Node]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>CodeAsText</maml:name>
        <maml:Description>
          <maml:para>Le contenu d'un noeud correspond au code analysé. Par défaut le contenu d'un noeud de code est 'Codeblock'.</maml:para>
        </maml:Description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>[System.Collections.Generic.List[[FlowChartCore.Node]]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------- Genération d'un graph au format .dot -------------</maml:title>
        <dev:code>$Sb={
 If ( $x ) 
 {
    Foreach ( $y in $x ) 
    { "Do Something" }
 }
}
Find-FlowChartNodes -Scriptblock $Sb|
 New-FLowChartGraph

#digraph "a" {
#        "01"[label="If $x",shape=diamond];
#        "end_01"[shape=mdiamond,label="End If"];
#        "01" -&gt; "0110"[label="True"];
#        "01" -&gt; "end_01"[label="False"];
#        "end_01" -&gt; "end_of_script";
#        "0110"[label="CodeBlock"];
#        "0110" -&gt; "end_01";
#}</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Dans cette exemple le résultat est une chaîne de caractères contenant une déclaration de graph interprété par l'outil Dot.exe de Graphviz.</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Genération d'un graph détaillé au format .dot --------</maml:title>
        <dev:code>$Sb={
 If ( $x ) 
 {
    "Do Something" 
 }
}
Find-FlowChartNodes -Scriptblock $Sb|
 New-FLowChartGraph  -CodeAsText

#digraph "a" {
#        "01"[label="If $x",shape=diamond];
#        "end_01"[shape=mdiamond,label="End If"];
#        "01" -&gt; "0110"[label="True"];
#        "01" -&gt; "end_01"[label="False"];
#        "end_01" -&gt; "end_of_script";
#        "0110"[label="\"Do Something\"",shape=box];
#        "0110" -&gt; "end_01";
#}</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Dans cette exemple le label associé au code liée au If contient [label="\"Do Something\"] et plus le label par défaut [label="CodeBlock"].</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Genération d'un graph et affichage d'un graphique au format png</maml:title>
        <dev:code>$Sb={
 If ( $x ) 
 {
    "Do Something" 
 }
}

$Path=$Env:Temp
$FileName='Test'

$FullFileName=Join-Path $Path $FileName
$GraphFilename="$FullFileName.graph"

$Result=Find-FLowChartNodes -ScriptBlock $Sb|New-FLowChartGraph -CodeAsText:$AsText
if ($null -ne $Result) 
{ 
    $GraphFilename="$FullFileName.graph"
    $Result|Set-Content $GraphFilename
    if (Test-Path Env:GRAPHVIZ_DOT)
    {
    if ((Test-Path $GraphFilename) -and ((Get-Item $GraphFilename).length -ne 0))
    {
        &amp;"$Env:GRAPHVIZ_DOT\dot.exe" -Tpng $GraphFilename -o "$FullFileName.png"
        if (! $NoDisplay.IsPresent)
        { Invoke-Item "$FullFileName.png" }
    }
    else 
    { Write-Warning "No file or zero size file." }
    }
}</dev:code>
        <dev:remarks>
          <maml:para>Description</maml:para>
          <maml:para>Dans cette exemple on analyse un scriptblock, puis on génére le .dot représentant le graph, enfin on génére l'image représentant le logigramme (l'enchaînement des opérations) du code Powershell.</maml:para>
          <maml:para>.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
</helpItems>