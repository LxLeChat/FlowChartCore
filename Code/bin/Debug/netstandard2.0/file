digraph a {
	graph [bb="0,0,4484,24314"];
	node [label="\N"];
	01	 [height=43.778,
		label="<TABLE><TR><TD># Author: William Lam\n# Website: www.virtuallyghetto.com\n# Description: PowerCLI script to deploy a fully functional \
vSphere 6.5 lab consisting of 3\n#               Nested ESXi hosts enable w/vSAN + VCSA 6.5. Expects a single physical ESXi host\n#               \
as the endpoint and all four VMs will be deployed to physical ESXi host\n# Reference: http://www.virtuallyghetto.com/2016/11/vghetto-automated-vsphere-lab-deployment-for-vsphere-6-0u2-vsphere-6-5.html\n# \
Credit: Thanks to Alan Renouf as I borrowed some of his PCLI code snippets :)\n#\n# Changelog\n# 11/22/16\n#   * Automatically handle \
Nested ESXi on vSAN\n# 01/20/17\n#   * Resolved \"Another task in progress\" thanks to Jason M\n# 02/12/17\n#   * Support for deploying \
to VC Target\n#   * Support for enabling SSH on VCSA\n#   * Added option to auto-create vApp Container for VMs\n#   * Added pre-check \
for required files\n# 02/17/17\n#   * Added missing dvFilter param to eth1 (missing in Nested ESXi OVA)\n# 02/21/17\n#   * Support \
for deploying NSX 6.3 & registering with vCenter Server\n#   * Support for updating Nested ESXi VM to ESXi 6.5a (required for NSX \
6.3)\n#   * Support for VDS + VXLAN VMkernel configuration (required for NSX 6.3)\n#   * Support for \"Private\" Portgroup on eth1 \
for Nested ESXi VM used for VXLAN traffic (required for NSX 6.3)\n#   * Support for both Virtual & Distributed Portgroup on $VMNetwork\n#   * \
Support for adding ESXi hosts into VC using DNS name (disabled by default)\n#   * Added CPU/MEM/Storage resource requirements in \
confirmation screen\n# 05/08/17\n#   * Support for patching ESXi using VMware Online repo thanks to Matt Lichstein for contribution\n#   * \
Added fix to test ESXi endpoint before trying to patch\n# 04/18/18\n#   * Added support for vCenter Server 6.7, some of the JSON \
params have changed for consistency purposes which needed to be updated\n#   * Added support for new Nested ESXi 6.7 Virtual Appliance (\
will need to download that first)\n#   * vMotion is now enabled by default on vmk0 for all Nested ESXi hosts\n# 02/10/2020\n#   * \
Added support for deploying basic vSphere environment (ESXi VM + VCSA) into VMware Cloud on AWS (Nested vSAN not supported)\n\n# \
Physical ESXi host or vCenter Server to deploy vSphere 6.7 lab\n$VIServer = \"vcenter.sddc-a-b-c-d.vmwarevmc.com\"\n$VIUsername = '\
cloudadmin@vmc.local'\n$VIPassword = 'FILL-ME-IN'\n\n# Specifies whether deployment is to an ESXi host or vCenter Server\n# Use \
either ESXI or VCENTER or VMC\n$DeploymentTarget = \"VMC\"\n\n# Full Path to both the Nested ESXi 6.7 VA + extracted VCSA 6.7 ISO\n$\
NestedESXiApplianceOVA = 'C:\\Users\\Administrator\\Desktop\\VMC-Customer0\\Nested_ESXi6.7u3_Appliance_Template_v1.ova'\n$VCSAInstallerPath = '\
C:\\Users\\Administrator\\Desktop\\VMC-Customer0\\VMware-VCSA-all-6.7.0-15132721'\n$NSXOVA =  'C:\\Users\\Administrator\\Desktop\\VMC-Customer0\\VMware-NSX-Manager-6.3.0-5007049.ova'\n$\
ESXi65OfflineBundle = 'C:\\Users\\Administrator\\Desktop\\VMC-Customer0\\ESXi650-201701001\\vmw-ESXi-6.5.0-metadata.zip' # Used \
for offline upgrade only\n$ESXiProfileName = 'ESXi-6.5.0-20170404001-standard' # Used for online upgrade only\n\n# Nested ESXi VMs \
to deploy\n$NestedESXiHostnameToIPs = @{\n    \"vesxi67-1\" = \"192.168.1.51\"\n    \"vesxi67-2\" = \"192.168.1.52\"\n    \"vesxi67-3\" = \"\
192.168.1.53\"\n}\n\n# Nested ESXi VM Resources\n$NestedESXivCPU = \"2\"\n$NestedESXivMEM = \"6\" #GB\n$NestedESXiCachingvDisk = \"4\" #\
GB\n$NestedESXiCapacityvDisk = \"8\" #GB\n\n# VCSA Deployment Configuration\n$VCSADeploymentSize = \"tiny\"\n$VCSADisplayName = \"vcenter67-1\"\n$\
VCSAIPAddress = \"192.168.1.50\"\n$VCSAHostname = \"vcenter67-1.vmware.corp\" #Change to IP if you don't have valid DNS\n$VCSAPrefix = \"\
24\"\n$VCSASSODomainName = \"vsphere.local\"\n$VCSASSOPassword = \"VMware1!\"\n$VCSARootPassword = \"VMware1!\"\n$VCSASSHEnable = \"true\"\n\n# \
General Deployment Configuration for Nested ESXi, VCSA & NSX VMs\n$VirtualSwitchType = \"VDS\" # VSS or VDS\n$VMNetwork = \"sddc-cgw-network-1\"\n$\
VMDatastore = \"WorkloadDatastore\"\n$VMNetmask = \"255.255.255.0\"\n$VMGateway = \"192.168.1.1\"\n$VMDNS = \"192.168.1.100\"\n$VMNTP = \"\
pool.ntp.org\"\n$VMPassword = \"VMware1!\"\n$VMDomain = \"vmware.corp\"\n$VMSyslog = \"192.168.1.200\"\n# Applicable to Nested ESXi only\n$\
VMSSH = \"true\"\n$VMVMFS = \"false\"\n# Applicable to VC Deployment Target only\n$VMCluster = \"Cluster-1\"\n# Defaults for VMC\n$VMDatacenter = \"\
SDDC-Datacenter\"\n$VMFolder = \"Workloads\"\n$VMResourcePool = \"Compute-ResourcePool\"\n\n# Name of new vSphere Datacenter/Cluster \
when VCSA is deployed\n$NewVCDatacenterName = \"Datacenter\"\n$NewVCVSANClusterName = \"vSphere-Cluster\"\n\n# NSX Manager Configuration\n$\
DeployNSX = 0\n$NSXvCPU = \"2\" # Reconfigure NSX vCPU\n$NSXvMEM = \"8\" # Reconfigure NSX vMEM (GB)\n$NSXDisplayName = \"nsx63-1\"\n$\
NSXHostname = \"nsx63-1.primp-industries.com\"\n$NSXIPAddress = \"172.30.0.250\"\n$NSXNetmask = \"255.255.255.0\"\n$NSXGateway = \"172.30.0.1\"\n$\
NSXSSHEnable = \"true\"\n$NSXCEIPEnable = \"false\"\n$NSXUIPassword = \"VMw@re123!\"\n$NSXCLIPassword = \"VMw@re123!\"\n\n# VDS / VXLAN \
Configurations\n$PrivateVXLANVMNetwork = \"dv-private-network\" # Existing Portgroup\n$VDSName = \"VDS-6.7\"\n$VXLANDVPortgroup = \"VXLAN\"\n$\
VXLANSubnet = \"172.16.66.\"\n$VXLANNetmask = \"255.255.255.0\"\n\n# Advanced Configurations\n# Set to 1 only if you have DNS (forward/\
reverse) for ESXi hostnames\n$addHostByDnsName = 1\n# Upgrade vESXi hosts (defaults to pulling upgrade from VMware using profile \
specified in $ESXiProfileName)\n$upgradeESXi = 0\n# Set to 1 only if you want to upgrade using local bundle specified in $ESXi65OfflineBundle\n$\
offlineUpgrade = 0\n# Enable verbose output to a new PowerShell Console. Thanks to suggestion by Christian Mohn\n$enableVerboseLoggingToNewShell = \
0\n\n#### DO NOT EDIT BEYOND HERE ####\n\n$verboseLogFile = \"vsphere67-vghetto-lab-deployment.log\"\n$vSphereVersion = \"6.7\"\n$deploymentType = \"\
Standard\"\n$random_string = -join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_})\n$VAppName = \"vGhetto-Nested-vSphere-Lab-$\
vSphereVersion-$random_string\"\n$depotServer = \"https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml\"\n\n$\
vcsaSize2MemoryStorageMap = @{\n\"tiny\"=@{\"cpu\"=\"2\";\"mem\"=\"10\";\"disk\"=\"250\"};\n\"small\"=@{\"cpu\"=\"4\";\"mem\"=\"16\";\"disk\"=\"290\"};\n\"medium\"=@{\"\
cpu\"=\"8\";\"mem\"=\"24\";\"disk\"=\"425\"};\n\"large\"=@{\"cpu\"=\"16\";\"mem\"=\"32\";\"disk\"=\"640\"};\n\"xlarge\"=@{\"cpu\"=\"24\";\"mem\"=\"48\";\"disk\"=\"980\"}\n}\n\n$\
esxiTotalCPU = 0\n$vcsaTotalCPU = 0\n$nsxTotalCPU = 0\n$esxiTotalMemory = 0\n$vcsaTotalMemory = 0\n$nsxTotalMemory = 0\n$esxiTotStorage = \
0\n$vcsaTotalStorage = 0\n$nsxTotalStorage = 0\n\n$preCheck = 1\n$confirmDeployment = 1\n$deployNestedESXiVMs = 1\n$deployVCSA = \
1\n$setupNewVC = 1\n$addESXiHostsToVC = 1\n$configureVSANDiskGroups = 0\n$clearVSANHealthCheckAlarm = 0\n$configurevMotion = 1\n$\
setupVXLAN = 0\n$configureNSX = 0\n$moveVMsIntovApp = 1\n\n$StartTime = Get-Date\n\nFunction My-Logger {\n    param(\n    [Parameter(\
Mandatory=$true)]\n    [String]$message\n    )\n\n    $timeStamp = Get-Date -Format \"MM-dd-yyyy_hh:mm:ss\"\n\n    Write-Host -NoNewline \
-ForegroundColor White \"[$timestamp]\"\n    Write-Host -ForegroundColor Green \" $message\"\n    $logMessage = \"[$timeStamp] $message\"\n    $\
logMessage | Out-File -Append -LiteralPath $verboseLogFile\n}\n\nFunction URL-Check([string] $url) {\n    $isWorking = $true\n\n    \
try {\n        $request = [System.Net.WebRequest]::Create($url)\n        $request.Method = \"HEAD\"\n        $request.UseDefaultCredentials = $\
true\n\n        $response = $request.GetResponse()\n        $httpStatus = $response.StatusCode\n\n        $isWorking = ($httpStatus \
-eq \"OK\")\n    }\n    catch {\n        $isWorking = $false\n    }\n    return $isWorking\n}</TD></TR></TABLE>\l",
		pos="3904,22738",
		shape=box,
		width=16.111];
	02	 [height=0.5,
		label="If $preCheck -eq 1\l",
		pos="3904,21107",
		shape=diamond,
		width=3.8554];
	01 -> 02	 [pos="e,3904,21125 3904,21162 3904,21152 3904,21143 3904,21136"];
	0210	 [height=0.5,
		label="If !(Test-Path $NestedESXiApplianceOVA)\l",
		pos="3904,21020",
		shape=diamond,
		width=8.1703];
	02 -> 0210	 [label="True\l",
		lp="3921,21064",
		pos="e,3904,21038 3904,21089 3904,21077 3904,21062 3904,21048"];
	end_02	 [height=0.5,
		label="End If\l",
		pos="2422,18756",
		shape=mdiamond,
		width=0.84722];
	03	 [height=0.5,
		label="If $confirmDeployment -eq 1\l",
		pos="2422,18683",
		shape=diamond,
		width=5.6937];
	end_02 -> 03	 [pos="e,2422,18701 2422,18738 2422,18730 2422,18720 2422,18711"];
	021020	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nUnable to find $NestedESXiApplianceOVA ...`nexiting\"</TD></TR></TABLE>\l",
		pos="3904,20933",
		shape=box,
		width=14.222];
	0210 -> 021020	 [label="True\l",
		lp="3921,20976",
		pos="e,3904,20951 3904,21002 3904,20990 3904,20975 3904,20961"];
	0310	 [height=2.8333,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Magenta \"`nPlease confirm the following configuration will be deployed:`n\"\n\n    Write-Host \
-ForegroundColor Yellow \"---- vGhetto vSphere Automated Lab Deployment Configuration ---- \"\n    Write-Host -NoNewline -ForegroundColor \
Green \"Deployment Target: \"\n    Write-Host -ForegroundColor White $DeploymentTarget\n    Write-Host -NoNewline -ForegroundColor \
Green \"Deployment Type: \"\n    Write-Host -ForegroundColor White $deploymentType\n    Write-Host -NoNewline -ForegroundColor Green \"\
vSphere Version: \"\n    Write-Host -ForegroundColor White  \"vSphere $vSphereVersion\"\n    Write-Host -NoNewline -ForegroundColor \
Green \"Nested ESXi Image Path: \"\n    Write-Host -ForegroundColor White $NestedESXiApplianceOVA\n    Write-Host -NoNewline -ForegroundColor \
Green \"VCSA Image Path: \"\n    Write-Host -ForegroundColor White $VCSAInstallerPath</TD></TR></TABLE>\l",
		pos="2422,18512",
		shape=box,
		width=13.028];
	03 -> 0310	 [label="True\l",
		lp="2439,18640",
		pos="e,2422,18614 2422,18665 2422,18654 2422,18640 2422,18624"];
	end_0210	 [height=0.5,
		label="End If\l",
		pos="3822,20787",
		shape=mdiamond,
		width=0.84722];
	0211	 [height=0.5,
		label="If !(Test-Path $VCSAInstallerPath)\l",
		pos="3602,20714",
		shape=diamond,
		width=6.766];
	end_0210 -> 0211	 [pos="e,3646.4,20729 3791.4,20777 3756.5,20765 3698.6,20746 3656.1,20732"];
	021021	 [height=0.5,
		label="Exit\l",
		pos="3904,20860",
		width=0.83048];
	021020 -> 021021	 [pos="e,3904,20878 3904,20915 3904,20907 3904,20897 3904,20888"];
	021120	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nUnable to find $VCSAInstallerPath ...`nexiting\"</TD></TR></TABLE>\l",
		pos="3422,20627",
		shape=box,
		width=13.444];
	0211 -> 021120	 [label="True\l",
		lp="3539,20670",
		pos="e,3459.3,20645 3569.4,20698 3541.2,20685 3500.1,20665 3468.4,20649"];
	021021 -> end_0210	 [pos="e,3842.5,20805 3887,20845 3876.4,20835 3862.4,20823 3850.2,20812",
		style=dotted];
	end_of_script	 [height=0.5,
		pos="3715,18",
		width=2.0401];
	021021 -> end_of_script	 [label="Exit\l",
		lp="3949,9662.5",
		pos="e,3779.5,26.775 3915.3,20843 3923.8,20829 3934,20807 3934,20787 3934,20787 3934,20787 3934,91 3934,59.805 3853,39.555 3789.5,28.475"];
	end_0211	 [height=0.5,
		label="End If\l",
		pos="3414,20481",
		shape=mdiamond,
		width=0.84722];
	0212	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="3412,20408",
		shape=diamond,
		width=4.1873];
	end_0211 -> 0212	 [pos="e,3412.5,20426 3413.5,20463 3413.3,20455 3413,20445 3412.8,20436"];
	021121	 [height=0.5,
		label="Exit\l",
		pos="3422,20554",
		width=0.83048];
	021120 -> 021121	 [pos="e,3422,20572 3422,20609 3422,20601 3422,20591 3422,20582"];
	021220	 [height=0.5,
		label="If !(Test-Path $NSXOVA)\l",
		pos="3412,20321",
		shape=diamond,
		width=4.9788];
	0212 -> 021220	 [label="True\l",
		lp="3429,20364",
		pos="e,3412,20339 3412,20390 3412,20378 3412,20363 3412,20349"];
	021121 -> end_of_script	 [label="Exit\l",
		lp="3904,9454.5",
		pos="e,3770.1,30.041 3451.9,20552 3555,20547 3889,20525 3889,20481 3889,20481 3889,20481 3889,91 3889,66.431 3829.3,45.591 3779.8,32.545"];
	021121 -> end_0211	 [pos="e,3416,20499 3420,20536 3419.1,20528 3418.1,20518 3417.1,20509",
		style=dotted];
	end_0212	 [height=0.5,
		label="End If\l",
		pos="2975,19636",
		shape=mdiamond,
		width=0.84722];
	0213	 [height=0.5,
		label="If $upgradeESXi -eq 1\l",
		pos="2959,19563",
		shape=diamond,
		width=4.4937];
	end_0212 -> 0213	 [pos="e,2962.9,19581 2971,19618 2969.2,19610 2967,19600 2965,19590"];
	02122030	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nUnable to find $NSXOVA ...`nexiting\"</TD></TR></TABLE>\l",
		pos="3411,20234",
		shape=box,
		width=12.486];
	021220 -> 02122030	 [label="True\l",
		lp="3429,20278",
		pos="e,3411.2,20252 3411.8,20303 3411.7,20291 3411.5,20276 3411.3,20262"];
	021320	 [height=0.5,
		label="If $offlineUpgrade -eq 1\l",
		pos="2955,19476",
		shape=diamond,
		width=4.8];
	0213 -> 021320	 [label="True\l",
		lp="2975,19520",
		pos="e,2955.8,19494 2958.2,19545 2957.6,19533 2956.9,19518 2956.3,19504"];
	end_021220	 [height=0.5,
		label="End If\l",
		pos="3259,20088",
		shape=mdiamond,
		width=0.84722];
	021221	 [height=0.5,
		label="If -not (Get-Module -Name \"PowerNSX\")\l",
		pos="3169,20015",
		shape=diamond,
		width=7.7873];
	end_021220 -> 021221	 [pos="e,3189.8,20032 3236.8,20070 3225,20060 3210.4,20049 3197.7,20038"];
	02122031	 [height=0.5,
		label="Exit\l",
		pos="3411,20161",
		width=0.83048];
	02122030 -> 02122031	 [pos="e,3411,20179 3411,20216 3411,20208 3411,20198 3411,20189"];
	02122130	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nPowerNSX Module is not loaded, please install and load PowerNSX before running \
script ...`nexiting\"</TD></TR></TABLE>\l",
		pos="3124,19928",
		shape=box,
		width=18.847];
	021221 -> 02122130	 [label="True\l",
		lp="3167,19972",
		pos="e,3133.4,19946 3159.9,19997 3153.6,19985 3145.2,19969 3138.1,19955"];
	02122031 -> end_of_script	 [label="Exit\l",
		lp="3846,9265",
		pos="e,3769.3,30.328 3440.9,20159 3536.8,20152 3831,20128 3831,20088 3831,20088 3831,20088 3831,91 3831,62.584 3805.8,44.794 3778.8,33.9"];
	02122031 -> end_021220	 [pos="e,3289.5,20103 3387.6,20150 3363.9,20138 3327,20121 3298.7,20107",
		style=dotted];
	end_021221	 [height=0.5,
		label="End If\l",
		pos="3039,19782",
		shape=mdiamond,
		width=0.84722];
	021222	 [height=0.5,
		label="<TABLE><TR><TD>$upgradeESXi = 1</TD></TR></TABLE>\l",
		pos="2996,19709",
		shape=box,
		width=6.8194];
	end_021221 -> 021222	 [pos="e,3006.7,19727 3028.4,19764 3023.4,19755 3017.3,19745 3011.7,19736"];
	02122131	 [height=0.5,
		label="Exit\l",
		pos="3124,19855",
		width=0.83048];
	02122130 -> 02122131	 [pos="e,3124,19873 3124,19910 3124,19902 3124,19892 3124,19883"];
	021222 -> end_0212	 [pos="e,2980.2,19654 2990.8,19691 2988.5,19683 2985.6,19673 2983,19664"];
	02122131 -> end_of_script	 [label="Exit\l",
		lp="3788,8482",
		pos="e,3739.6,35.141 3154,19855 3281.6,19854 3773,19845 3773,19782 3773,19782 3773,19782 3773,91 3773,71.743 3760.5,54.618 3747.1,41.804"];
	02122131 -> end_021221	 [pos="e,3060.1,19800 3106.8,19840 3095.6,19831 3080.8,19818 3067.9,19807",
		style=dotted];
	end_0213	 [height=0.5,
		label="End If\l",
		pos="2422,18829",
		shape=mdiamond,
		width=0.84722];
	end_0213 -> end_02	 [pos="e,2422,18774 2422,18811 2422,18803 2422,18793 2422,18784"];
	02132030	 [height=0.5,
		label="If !(Test-Path $ESXi65OfflineBundle)\l",
		pos="2954,19389",
		shape=diamond,
		width=7.2001];
	021320 -> 02132030	 [label="True\l",
		lp="2972,19432",
		pos="e,2954.2,19407 2954.8,19458 2954.7,19446 2954.5,19431 2954.3,19417"];
	end_021320	 [height=0.5,
		label="End If\l",
		pos="2422,18902",
		shape=mdiamond,
		width=0.84722];
	end_021320 -> end_0213	 [pos="e,2422,18847 2422,18884 2422,18876 2422,18866 2422,18857"];
	0213203040	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nUnable to find $ESXi65OfflineBundle ...`nexiting\"</TD></TR></TABLE>\l",
		pos="2954,19248",
		shape=box,
		width=13.694];
	02132030 -> 0213203040	 [label="True\l",
		lp="2971,19346",
		pos="e,2954,19266 2954,19371 2954,19347 2954,19304 2954,19276"];
	021320304250	 [height=0.5,
		label="If !(URL-Check($depotServer))\l",
		pos="2564,19302",
		shape=diamond,
		width=6.1022];
	02132030 -> 021320304250	 [label="False\l",
		lp="2802,19346",
		pos="e,2623.3,19315 2892.2,19375 2821.7,19359 2706.8,19334 2633.4,19317"];
	end_02132030	 [height=0.5,
		label="End If\l",
		pos="2422,18975",
		shape=mdiamond,
		width=0.84722];
	end_02132030 -> end_021320	 [pos="e,2422,18920 2422,18957 2422,18949 2422,18939 2422,18930"];
	0213203041	 [height=0.5,
		label="Exit\l",
		pos="2954,19048",
		width=0.83048];
	0213203040 -> 0213203041	 [pos="e,2954,19066 2954,19230 2954,19195 2954,19118 2954,19076"];
	02132030425060	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"`nVMware depot server is unavailable ...`nexiting\"</TD></TR></TABLE>\l",
		pos="2422,19194",
		shape=box,
		width=13.556];
	021320304250 -> 02132030425060	 [label="True\l",
		lp="2435,19248",
		pos="e,2414.8,19212 2481.6,19291 2453.3,19285 2426.6,19277 2418,19266 2408.5,19254 2409.1,19237 2412.2,19222"];
	0213203041 -> end_of_script	 [label="Exit\l",
		lp="3730,7832",
		pos="e,3715,36.3 2983.8,19047 3124.5,19041 3715,19012 3715,18975 3715,18975 3715,18975 3715,91 3715,76.3 3715,59.934 3715,46.43"];
	0213203041 -> end_02132030	 [pos="e,2452.6,18979 2924.6,19044 2835.1,19032 2565.6,18995 2462.6,18981",
		style=dotted];
	end_021320304250	 [height=0.5,
		label="End If\l",
		pos="2422,19048",
		shape=mdiamond,
		width=0.84722];
	end_021320304250 -> end_02132030	 [pos="e,2422,18993 2422,19030 2422,19022 2422,19012 2422,19003"];
	02132030425061	 [height=0.5,
		label="Exit\l",
		pos="2422,19121",
		width=0.83048];
	02132030425060 -> 02132030425061	 [pos="e,2422,19139 2422,19176 2422,19168 2422,19158 2422,19149"];
	02132030425061 -> end_of_script	 [label="Exit\l",
		lp="15,7876.5",
		pos="e,3641.5,18.497 2391.8,19121 2113.2,19120 0,19111 0,19048 0,19048 0,19048 0,91 0,8.2312 661.25,55.604 744,54 1888,31.828 3280,21.051 \
3631.4,18.568"];
	02132030425061 -> end_021320304250	 [pos="e,2422,19066 2422,19103 2422,19095 2422,19085 2422,19076",
		style=dotted];
	end_03	 [height=0.5,
		label="End If\l",
		pos="1533,14081",
		shape=mdiamond,
		width=0.84722];
	04	 [height=0.5,
		label="If $DeploymentTarget -eq \"ESXI\"\l",
		pos="1533,14008",
		shape=diamond,
		width=6.5362];
	end_03 -> 04	 [pos="e,1533,14026 1533,14063 1533,14055 1533,14045 1533,14036"];
	0311	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="2422,18355",
		shape=diamond,
		width=4.1873];
	0310 -> 0311	 [pos="e,2422,18373 2422,18410 2422,18400 2422,18391 2422,18383"];
	0410	 [height=0.5,
		label="<TABLE><TR><TD>$datastore = Get-Datastore -Server $viConnection -Name $VMDatastore</TD></TR></TABLE>\l",
		pos="1532,13921",
		shape=box,
		width=12.236];
	04 -> 0410	 [label="True\l",
		lp="1550,13964",
		pos="e,1532.2,13939 1532.8,13990 1532.7,13978 1532.5,13963 1532.3,13949"];
	041420	 [height=0.5,
		label="<TABLE><TR><TD>$datastore = Get-Datastore -Server $viConnection -Name $VMDatastore | Select -First 1</TD></TR></TABLE>\l",
		pos="2500,13921",
		shape=box,
		width=13.847];
	04 -> 041420	 [label="False\l",
		lp="2094,13964",
		pos="e,2299.9,13939 1641.1,13998 1797.5,13984 2090.1,13958 2289.9,13940"];
	031120	 [height=0.52778,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"NSX Image Path: \"\n        Write-Host -ForegroundColor White $NSXOVA</\
TD></TR></TABLE>\l",
		pos="2422,18267",
		shape=box,
		width=9.3611];
	0311 -> 031120	 [label="True\l",
		lp="2439,18312",
		pos="e,2422,18286 2422,18337 2422,18325 2422,18310 2422,18296"];
	end_0311	 [height=0.5,
		label="End If\l",
		pos="2422,18193",
		shape=mdiamond,
		width=0.84722];
	0312	 [height=0.5,
		label="If $DeploymentTarget -eq \"ESXI\"\l",
		pos="2422,18120",
		shape=diamond,
		width=6.5362];
	end_0311 -> 0312	 [pos="e,2422,18138 2422,18175 2422,18167 2422,18157 2422,18148"];
	031120 -> end_0311	 [pos="e,2422,18211 2422,18248 2422,18240 2422,18230 2422,18221"];
	031220	 [height=0.52778,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Yellow \"`n---- Physical ESXi Deployment Target Configuration ----\"\n        Write-Host \
-NoNewline -ForegroundColor Green \"ESXi Address: \"</TD></TR></TABLE>\l",
		pos="1533,18032",
		shape=box,
		width=12.028];
	0312 -> 031220	 [label="True\l",
		lp="2075,18076",
		pos="e,1725.2,18051 2319.2,18110 2176.9,18096 1917,18070 1735.2,18052"];
	03122130	 [height=0.52778,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Yellow \"`n---- vCenter Server Deployment Target Configuration ----\"\n        Write-Host \
-NoNewline -ForegroundColor Green \"vCenter Server Address: \"</TD></TR></TABLE>\l",
		pos="2422,18032",
		shape=box,
		width=12.167];
	0312 -> 03122130	 [label="False\l",
		lp="2441,18076",
		pos="e,2422,18051 2422,18102 2422,18090 2422,18075 2422,18061"];
	end_0312	 [height=0.5,
		label="End If\l",
		pos="1533,17958",
		shape=mdiamond,
		width=0.84722];
	0313	 [height=1.1528,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor White $VIServer\n    Write-Host -NoNewline -ForegroundColor Green \"Username: \"\n    Write-Host \
-ForegroundColor White $VIUsername\n    Write-Host -NoNewline -ForegroundColor Green \"VM Network: \"\n    Write-Host -ForegroundColor \
White $VMNetwork</TD></TR></TABLE>\l",
		pos="1533,17862",
		shape=box,
		width=7.9167];
	end_0312 -> 0313	 [pos="e,1533,17903 1533,17940 1533,17932 1533,17923 1533,17913"];
	031220 -> end_0312	 [pos="e,1533,17976 1533,18013 1533,18005 1533,17995 1533,17986"];
	03122130 -> end_0312	 [pos="e,1563.8,17961 2193.6,18013 1981.3,17995 1682,17970 1573.9,17961"];
	0314	 [height=0.5,
		label="If $DeployNSX -eq 1 -and $setupVXLAN -eq 1\l",
		pos="1533,17765",
		shape=diamond,
		width=8.8341];
	0313 -> 0314	 [pos="e,1533,17783 1533,17820 1533,17811 1533,17802 1533,17793"];
	031420	 [height=0.52778,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"Private VXLAN VM Network: \"\n        Write-Host -ForegroundColor White $\
PrivateVXLANVMNetwork</TD></TR></TABLE>\l",
		pos="1533,17677",
		shape=box,
		width=10.569];
	0314 -> 031420	 [label="True\l",
		lp="1550,17722",
		pos="e,1533,17696 1533,17747 1533,17735 1533,17720 1533,17706"];
	end_0314	 [height=0.5,
		label="End If\l",
		pos="1533,17603",
		shape=mdiamond,
		width=0.84722];
	0315	 [height=0.52778,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"VM Storage: \"\n    Write-Host -ForegroundColor White $VMDatastore</\
TD></TR></TABLE>\l",
		pos="1533,17529",
		shape=box,
		width=8.8889];
	end_0314 -> 0315	 [pos="e,1533,17548 1533,17585 1533,17577 1533,17567 1533,17558"];
	031420 -> end_0314	 [pos="e,1533,17621 1533,17658 1533,17650 1533,17640 1533,17631"];
	0316	 [height=0.5,
		label="If $DeploymentTarget -eq \"VCENTER\"\l",
		pos="1533,17455",
		shape=diamond,
		width=7.532];
	0315 -> 0316	 [pos="e,1533,17473 1533,17510 1533,17502 1533,17492 1533,17483"];
	031620	 [height=0.94444,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"VM Cluster: \"\n        Write-Host -ForegroundColor White $VMCluster\n        \
Write-Host -NoNewline -ForegroundColor Green \"VM vApp: \"\n        Write-Host -ForegroundColor White $VAppName</TD></TR></TABLE>\l",
		pos="1533,17352",
		shape=box,
		width=8.8472];
	0316 -> 031620	 [label="True\l",
		lp="1550,17412",
		pos="e,1533,17386 1533,17437 1533,17425 1533,17410 1533,17396"];
	end_0316	 [height=0.5,
		label="End If\l",
		pos="1533,17263",
		shape=mdiamond,
		width=0.84722];
	0317	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="1533,17190",
		shape=diamond,
		width=6.5107];
	end_0316 -> 0317	 [pos="e,1533,17208 1533,17245 1533,17237 1533,17227 1533,17218"];
	031620 -> end_0316	 [pos="e,1533,17281 1533,17318 1533,17309 1533,17300 1533,17291"];
	031720	 [height=1.3611,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"VM Folder: \"\n        Write-Host -ForegroundColor White $VMFolder\n        \
Write-Host -NoNewline -ForegroundColor Green \"VM Resource Pool: \"\n        Write-Host -ForegroundColor White $VMResourcePool\n        \
Write-Host -NoNewline -ForegroundColor Green \"VM vApp: \"\n        Write-Host -ForegroundColor White $VAppName</TD></TR></TABLE>\l",
		pos="1533,17072",
		shape=box,
		width=8.7361];
	0317 -> 031720	 [label="True\l",
		lp="1550,17146",
		pos="e,1533,17121 1533,17172 1533,17161 1533,17146 1533,17131"];
	end_0317	 [height=0.5,
		label="End If\l",
		pos="1533,16968",
		shape=mdiamond,
		width=0.84722];
	0318	 [height=10.333,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Yellow \"`n---- vESXi Configuration ----\"\n    Write-Host -NoNewline -ForegroundColor \
Green \"# of Nested ESXi VMs: \"\n    Write-Host -ForegroundColor White $NestedESXiHostnameToIPs.count\n    Write-Host -NoNewline \
-ForegroundColor Green \"vCPU: \"\n    Write-Host -ForegroundColor White $NestedESXivCPU\n    Write-Host -NoNewline -ForegroundColor \
Green \"vMEM: \"\n    Write-Host -ForegroundColor White \"$NestedESXivMEM GB\"\n    Write-Host -NoNewline -ForegroundColor Green \"Caching \
VMDK: \"\n    Write-Host -ForegroundColor White \"$NestedESXiCachingvDisk GB\"\n    Write-Host -NoNewline -ForegroundColor Green \"Capacity \
VMDK: \"\n    Write-Host -ForegroundColor White \"$NestedESXiCapacityvDisk GB\"\n    Write-Host -NoNewline -ForegroundColor Green \"\
IP Address(s): \"\n    Write-Host -ForegroundColor White $NestedESXiHostnameToIPs.Values\n    Write-Host -NoNewline -ForegroundColor \
Green \"Netmask \"\n    Write-Host -ForegroundColor White $VMNetmask\n    Write-Host -NoNewline -ForegroundColor Green \"Gateway: \"\n    \
Write-Host -ForegroundColor White $VMGateway\n    Write-Host -NoNewline -ForegroundColor Green \"DNS: \"\n    Write-Host -ForegroundColor \
White $VMDNS\n    Write-Host -NoNewline -ForegroundColor Green \"NTP: \"\n    Write-Host -ForegroundColor White $VMNTP\n    Write-Host \
-NoNewline -ForegroundColor Green \"Syslog: \"\n    Write-Host -ForegroundColor White $VMSyslog\n    Write-Host -NoNewline -ForegroundColor \
Green \"Enable SSH: \"\n    Write-Host -ForegroundColor White $VMSSH\n    Write-Host -NoNewline -ForegroundColor Green \"Create VMFS \
Volume: \"\n    Write-Host -ForegroundColor White $VMVMFS\n    Write-Host -NoNewline -ForegroundColor Green \"Root Password: \"\n    \
Write-Host -ForegroundColor White $VMPassword\n\n    Write-Host -ForegroundColor Yellow \"`n---- VCSA Configuration ----\"\n    Write-Host \
-NoNewline -ForegroundColor Green \"Deployment Size: \"\n    Write-Host -ForegroundColor White $VCSADeploymentSize\n    Write-Host \
-NoNewline -ForegroundColor Green \"SSO Domain: \"\n    Write-Host -ForegroundColor White $VCSASSODomainName\n    Write-Host -NoNewline \
-ForegroundColor Green \"SSO Password: \"\n    Write-Host -ForegroundColor White $VCSASSOPassword\n    Write-Host -NoNewline -ForegroundColor \
Green \"Root Password: \"\n    Write-Host -ForegroundColor White $VCSARootPassword\n    Write-Host -NoNewline -ForegroundColor Green \"\
Enable SSH: \"\n    Write-Host -ForegroundColor White $VCSASSHEnable\n    Write-Host -NoNewline -ForegroundColor Green \"Hostname: \"\n    \
Write-Host -ForegroundColor White $VCSAHostname\n    Write-Host -NoNewline -ForegroundColor Green \"IP Address: \"\n    Write-Host \
-ForegroundColor White $VCSAIPAddress\n    Write-Host -NoNewline -ForegroundColor Green \"Netmask \"\n    Write-Host -ForegroundColor \
White $VMNetmask\n    Write-Host -NoNewline -ForegroundColor Green \"Gateway: \"\n    Write-Host -ForegroundColor White $VMGateway</\
TD></TR></TABLE>\l",
		pos="1533,16541",
		shape=box,
		width=9.2639];
	end_0317 -> 0318	 [pos="e,1533,16913 1533,16950 1533,16943 1533,16934 1533,16923"];
	031720 -> end_0317	 [pos="e,1533,16986 1533,17023 1533,17014 1533,17005 1533,16996"];
	0319	 [height=0.5,
		label="If $DeployNSX -eq 1 -and $setupVXLAN -eq 1\l",
		pos="1533,16114",
		shape=diamond,
		width=8.8341];
	0318 -> 0319	 [pos="e,1533,16132 1533,16169 1533,16159 1533,16150 1533,16142"];
	031920	 [height=1.7778,
		label="<TABLE><TR><TD>Write-Host -NoNewline -ForegroundColor Green \"VDS Name: \"\n        Write-Host -ForegroundColor White $VDSName\n        \
Write-Host -NoNewline -ForegroundColor Green \"VXLAN Portgroup Name: \"\n        Write-Host -ForegroundColor White $VXLANDVPortgroup\n        \
Write-Host -NoNewline -ForegroundColor Green \"VXLAN Subnet: \"\n        Write-Host -ForegroundColor White $VXLANSubnet\n        Write-Host \
-NoNewline -ForegroundColor Green \"VXLAN Netmask: \"\n        Write-Host -ForegroundColor White $VXLANNetmask</TD></TR></TABLE>\l",
		pos="1533,15981",
		shape=box,
		width=8.7917];
	0319 -> 031920	 [label="True\l",
		lp="1550,16070",
		pos="e,1533,16045 1533,16096 1533,16085 1533,16071 1533,16056"];
	end_0319	 [height=0.5,
		label="End If\l",
		pos="1533,15862",
		shape=mdiamond,
		width=0.84722];
	03110	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="1533,15789",
		shape=diamond,
		width=4.1873];
	end_0319 -> 03110	 [pos="e,1533,15807 1533,15844 1533,15836 1533,15826 1533,15817"];
	031920 -> end_0319	 [pos="e,1533,15880 1533,15917 1533,15908 1533,15899 1533,15891"];
	0311020	 [height=4.4861,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Yellow \"`n---- NSX Configuration ----\"\n        Write-Host -NoNewline -ForegroundColor \
Green \"vCPU: \"\n        Write-Host -ForegroundColor White $NSXvCPU\n        Write-Host -NoNewline -ForegroundColor Green \"Memory (\
GB): \"\n        Write-Host -ForegroundColor White $NSXvMEM\n        Write-Host -NoNewline -ForegroundColor Green \"Hostname: \"\n        \
Write-Host -ForegroundColor White $NSXHostname\n        Write-Host -NoNewline -ForegroundColor Green \"IP Address: \"\n        Write-Host \
-ForegroundColor White $NSXIPAddress\n        Write-Host -NoNewline -ForegroundColor Green \"Netmask: \"\n        Write-Host -ForegroundColor \
White $NSXNetmask\n        Write-Host -NoNewline -ForegroundColor Green \"Gateway: \"\n        Write-Host -ForegroundColor White $\
NSXGateway\n        Write-Host -NoNewline -ForegroundColor Green \"Enable SSH: \"\n        Write-Host -ForegroundColor White $NSXSSHEnable\n        \
Write-Host -NoNewline -ForegroundColor Green \"Enable CEIP: \"\n        Write-Host -ForegroundColor White $NSXCEIPEnable\n        \
Write-Host -NoNewline -ForegroundColor Green \"UI Password: \"\n        Write-Host -ForegroundColor White $NSXUIPassword\n        \
Write-Host -NoNewline -ForegroundColor Green \"CLI Password: \"\n        Write-Host -ForegroundColor White $NSXCLIPassword</TD></TR></\
TABLE>\l",
		pos="1533,15558",
		shape=box,
		width=9.1111];
	03110 -> 0311020	 [label="True\l",
		lp="1550,15746",
		pos="e,1533,15720 1533,15771 1533,15761 1533,15746 1533,15730"];
	end_03110	 [height=0.5,
		label="End If\l",
		pos="1533,15342",
		shape=mdiamond,
		width=0.84722];
	03111	 [height=4.2917,
		label="<TABLE><TR><TD>$esxiTotalCPU = $NestedESXiHostnameToIPs.count * [int]$NestedESXivCPU\n    $esxiTotalMemory = $NestedESXiHostnameToIPs.count * [\
int]$NestedESXivMEM\n    $esxiTotalStorage = ($NestedESXiHostnameToIPs.count * [int]$NestedESXiCachingvDisk) + ($NestedESXiHostnameToIPs.count * [\
int]$NestedESXiCapacityvDisk)\n    $vcsaTotalCPU = $vcsaSize2MemoryStorageMap.$VCSADeploymentSize.cpu\n    $vcsaTotalMemory = $vcsaSize2MemoryStorageMap.$\
VCSADeploymentSize.mem\n    $vcsaTotalStorage = $vcsaSize2MemoryStorageMap.$VCSADeploymentSize.disk\n\n    Write-Host -ForegroundColor \
Yellow \"`n---- Resource Requirements ----\"\n    Write-Host -NoNewline -ForegroundColor Green \"ESXi VM CPU: \"\n    Write-Host -NoNewline \
-ForegroundColor White $esxiTotalCPU\n    Write-Host -NoNewline -ForegroundColor Green \" ESXi VM Memory: \"\n    Write-Host -NoNewline \
-ForegroundColor White $esxiTotalMemory \"GB \"\n    Write-Host -NoNewline -ForegroundColor Green \"ESXi VM Storage: \"\n    Write-Host \
-ForegroundColor White $esxiTotalStorage \"GB\"\n    Write-Host -NoNewline -ForegroundColor Green \"VCSA VM CPU: \"\n    Write-Host \
-NoNewline -ForegroundColor White $vcsaTotalCPU\n    Write-Host -NoNewline -ForegroundColor Green \" VCSA VM Memory: \"\n    Write-Host \
-NoNewline -ForegroundColor White $vcsaTotalMemory \"GB \"\n    Write-Host -NoNewline -ForegroundColor Green \"VCSA VM Storage: \"\n    \
Write-Host -ForegroundColor White $vcsaTotalStorage \"GB\"</TD></TR></TABLE>\l",
		pos="1533,15132",
		shape=box,
		width=17.014];
	end_03110 -> 03111	 [pos="e,1533,15287 1533,15324 1533,15317 1533,15307 1533,15297"];
	0311020 -> end_03110	 [pos="e,1533,15360 1533,15397 1533,15387 1533,15378 1533,15370"];
	03112	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="1533,14923",
		shape=diamond,
		width=4.1873];
	03111 -> 03112	 [pos="e,1533,14941 1533,14978 1533,14968 1533,14959 1533,14951"];
	0311220	 [height=1.9861,
		label="<TABLE><TR><TD>$nsxTotalCPU = [int]$NSXvCPU\n        $nsxTotalMemory = [int]$NSXvMEM\n        $nsxTotalStorage = 60\n        Write-Host \
-NoNewline -ForegroundColor Green \"NSX  VM CPU: \"\n        Write-Host -NoNewline -ForegroundColor White $nsxTotalCPU\n        Write-Host \
-NoNewline -ForegroundColor Green \" NSX  VM Memory: \"\n        Write-Host -NoNewline -ForegroundColor White $nsxTotalMemory \"GB \"\n        \
Write-Host -NoNewline -ForegroundColor Green \" NSX  VM Storage: \"\n        Write-Host -ForegroundColor White $nsxTotalStorage \"GB\"</\
TD></TR></TABLE>\l",
		pos="1533,14782",
		shape=box,
		width=9.125];
	03112 -> 0311220	 [label="True\l",
		lp="1550,14880",
		pos="e,1533,14854 1533,14905 1533,14894 1533,14880 1533,14864"];
	end_03112	 [height=0.5,
		label="End If\l",
		pos="1533,14656",
		shape=mdiamond,
		width=0.84722];
	03113	 [height=2.2083,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor White \"---------------------------------------------\"\n    Write-Host -NoNewline -ForegroundColor \
Green \"Total CPU: \"\n    Write-Host -ForegroundColor White ($esxiTotalCPU + $vcsaTotalCPU + $nsxTotalCPU)\n    Write-Host -NoNewline \
-ForegroundColor Green \"Total Memory: \"\n    Write-Host -ForegroundColor White ($esxiTotalMemory + $vcsaTotalMemory + $nsxTotalMemory) \"\
GB\"\n    Write-Host -NoNewline -ForegroundColor Green \"Total Storage: \"\n    Write-Host -ForegroundColor White ($esxiTotalStorage + $\
vcsaTotalStorage + $nsxTotalStorage) \"GB\"\n\n    Write-Host -ForegroundColor Magenta \"`nWould you like to proceed with this deployment?`\
n\"\n    $answer = Read-Host -Prompt \"Do you accept (Y or N)\"</TD></TR></TABLE>\l",
		pos="1533,14522",
		shape=box,
		width=10.931];
	end_03112 -> 03113	 [pos="e,1533,14601 1533,14638 1533,14630 1533,14621 1533,14611"];
	0311220 -> end_03112	 [pos="e,1533,14674 1533,14711 1533,14701 1533,14692 1533,14684"];
	03114	 [height=0.5,
		label="If $answer -ne \"Y\" -or $answer -ne \"y\"\l",
		pos="1533,14387",
		shape=diamond,
		width=7.3788];
	03113 -> 03114	 [pos="e,1533,14405 1533,14442 1533,14432 1533,14423 1533,14415"];
	0311420	 [height=0.5,
		label="Exit\l",
		pos="1533,14300",
		width=0.83048];
	03114 -> 0311420	 [label="True\l",
		lp="1550,14344",
		pos="e,1533,14318 1533,14369 1533,14357 1533,14342 1533,14328"];
	end_03114	 [height=0.5,
		label="End If\l",
		pos="1533,14227",
		shape=mdiamond,
		width=0.84722];
	03115	 [height=0.5,
		label="<TABLE><TR><TD>Clear-Host</TD></TR></TABLE>\l",
		pos="1533,14154",
		shape=box,
		width=6.0417];
	end_03114 -> 03115	 [pos="e,1533,14172 1533,14209 1533,14201 1533,14191 1533,14182"];
	0311420 -> end_of_script	 [label="Exit\l",
		lp="60,6188.5",
		pos="e,3641.3,18.473 1502.9,14299 1292.2,14295 45,14265 45,14227 45,14227 45,14227 45,91 45,44.608 3083.8,22.2 3631.1,18.541"];
	0311420 -> end_03114	 [pos="e,1533,14245 1533,14282 1533,14274 1533,14264 1533,14255",
		style=dotted];
	03115 -> end_03	 [pos="e,1533,14099 1533,14136 1533,14128 1533,14118 1533,14109"];
	end_04	 [height=0.5,
		label="End If\l",
		pos="1429,12636",
		shape=mdiamond,
		width=0.84722];
	05	 [height=0.5,
		label="If $deployNestedESXiVMs -eq 1\l",
		pos="1429,12563",
		shape=diamond,
		width=6.332];
	end_04 -> 05	 [pos="e,1429,12581 1429,12618 1429,12610 1429,12600 1429,12591"];
	0411	 [height=0.5,
		label="If $VirtualSwitchType -eq \"VSS\"\l",
		pos="1532,13848",
		shape=diamond,
		width=6.383];
	0410 -> 0411	 [pos="e,1532,13866 1532,13903 1532,13895 1532,13885 1532,13876"];
	041421	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="2509,13848",
		shape=diamond,
		width=6.5107];
	041420 -> 041421	 [pos="e,2506.8,13866 2502.2,13903 2503.2,13895 2504.4,13885 2505.6,13876"];
	0510	 [height=0.5,
		label="If $DeploymentTarget -eq \"ESXI\"\l",
		pos="1429,12476",
		shape=diamond,
		width=6.5362];
	05 -> 0510	 [label="True\l",
		lp="1446,12520",
		pos="e,1429,12494 1429,12545 1429,12533 1429,12518 1429,12504"];
	041120	 [height=0.5,
		label="<TABLE><TR><TD>$network = Get-VirtualPortGroup -Server $viConnection -Name $VMNetwork</TD></TR></TABLE>\l",
		pos="612,13761",
		shape=box,
		width=12.736];
	0411 -> 041120	 [label="True\l",
		lp="1145,13804",
		pos="e,802.63,13779 1427.8,13838 1278.9,13824 1002.2,13798 812.72,13780"];
	04112230	 [height=0.5,
		label="<TABLE><TR><TD>$network = Get-VDPortgroup -Server $viConnection -Name $VMNetwork</TD></TR></TABLE>\l",
		pos="1532,13761",
		shape=box,
		width=12.319];
	0411 -> 04112230	 [label="False\l",
		lp="1551,13804",
		pos="e,1532,13779 1532,13830 1532,13818 1532,13803 1532,13789"];
	end_0411	 [height=0.5,
		label="End If\l",
		pos="1226,13406",
		shape=mdiamond,
		width=0.84722];
	0412	 [height=0.5,
		label="<TABLE><TR><TD>$vmhost = Get-VMHost -Server $viConnection</TD></TR></TABLE>\l",
		pos="1226,13333",
		shape=box,
		width=9.625];
	end_0411 -> 0412	 [pos="e,1226,13351 1226,13388 1226,13380 1226,13370 1226,13361"];
	041121	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="612,13653",
		shape=diamond,
		width=4.1873];
	041120 -> 041121	 [pos="e,612,13671 612,13743 612,13726 612,13701 612,13681"];
	04112231	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="1426,13653",
		shape=diamond,
		width=4.1873];
	04112230 -> 04112231	 [pos="e,1442,13669 1514,13743 1496.1,13724 1468.5,13696 1449,13676"];
	0413	 [height=0.5,
		label="If $datastore.Type -eq \"vsan\"\l",
		pos="1227,13260",
		shape=diamond,
		width=5.7958];
	0412 -> 0413	 [pos="e,1226.8,13278 1226.2,13315 1226.4,13307 1226.5,13297 1226.6,13288"];
	04112130	 [height=0.5,
		label="<TABLE><TR><TD>$privateNetwork = Get-VirtualPortGroup -Server $viConnection -Name $PrivateVXLANVMNetwork</TD></TR></TABLE>\l",
		pos="612,13566",
		shape=box,
		width=14.972];
	041121 -> 04112130	 [label="True\l",
		lp="629,13610",
		pos="e,612,13584 612,13635 612,13623 612,13608 612,13594"];
	end_041121	 [height=0.5,
		label="End If\l",
		pos="880,13479",
		shape=mdiamond,
		width=0.84722];
	end_041121 -> end_0411	 [pos="e,1195.4,13412 910.71,13473 973.29,13459 1115.6,13429 1185.6,13415"];
	04112130 -> end_041121	 [pos="e,849.17,13489 667.53,13548 718.81,13531 793.76,13507 839.57,13492"];
	0411223140	 [height=0.5,
		label="<TABLE><TR><TD>$privateNetwork = Get-VDPortgroup -Server $viConnection -Name $PrivateVXLANVMNetwork</TD></TR></TABLE>\l",
		pos="1693,13566",
		shape=box,
		width=14.556];
	04112231 -> 0411223140	 [label="True\l",
		lp="1593,13610",
		pos="e,1637.7,13584 1466.6,13640 1509.4,13626 1577.5,13604 1627.8,13587"];
	end_04112231	 [height=0.5,
		label="End If\l",
		pos="1226,13479",
		shape=mdiamond,
		width=0.84722];
	end_04112231 -> end_0411	 [pos="e,1226,13424 1226,13461 1226,13453 1226,13443 1226,13434"];
	0411223140 -> end_04112231	 [pos="e,1256.8,13494 1512.5,13548 1438,13538 1351.3,13522 1266.6,13497"];
	041320	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"VSAN Datastore detected, enabling Fake SCSI Reservations ...\"\n        Get-AdvancedSetting -Entity $vmhost \
-Name \"VSAN.FakeSCSIReservations\" | Set-AdvancedSetting -Value 1 -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile</\
TD></TR></TABLE>\l",
		pos="1227,13172",
		shape=box,
		width=20.444];
	0413 -> 041320	 [label="True\l",
		lp="1244,13216",
		pos="e,1227,13191 1227,13242 1227,13230 1227,13215 1227,13201"];
	end_0413	 [height=0.5,
		label="End If\l",
		pos="1227,12998",
		shape=mdiamond,
		width=0.84722];
	end_0413 -> end_04	 [pos="e,1398.1,12641 1229.3,12980 1231.3,12961 1234,12933 1234,12908 1234,12908 1234,12908 1234,12709 1234,12676 1330.7,12654 1387.9,12643"];
	041320 -> end_0413	 [pos="e,1227,13016 1227,13153 1227,13122 1227,13062 1227,13026"];
	04142130	 [height=0.5,
		label="<TABLE><TR><TD>$network = Get-VirtualNetwork -Server $viConnection -Name $VMNetwork | Select -First 1</TD></TR></TABLE>\l",
		pos="3167,13707",
		shape=box,
		width=14.194];
	041421 -> 04142130	 [label="True\l",
		lp="2758,13804",
		pos="e,3082.7,13725 2570.9,13835 2686.5,13810 2936,13757 3072.7,13727"];
	0414213140	 [height=0.5,
		label="If $VirtualSwitchType -eq \"VSS\"\l",
		pos="2509,13761",
		shape=diamond,
		width=6.383];
	041421 -> 0414213140	 [label="False\l",
		lp="2528,13804",
		pos="e,2509,13779 2509,13830 2509,13818 2509,13803 2509,13789"];
	end_041421	 [height=0.5,
		label="End If\l",
		pos="3062,13260",
		shape=mdiamond,
		width=0.84722];
	041422	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="3060,13172",
		shape=diamond,
		width=6.5107];
	end_041421 -> 041422	 [pos="e,3060.4,13190 3061.6,13242 3061.3,13230 3061,13214 3060.6,13200"];
	04142130 -> end_041421	 [pos="e,3092.9,13260 3581.2,13689 3620.1,13684 3648.7,13678 3658,13671 3680.4,13653 3677,13638 3677,13610 3677,13610 3677,13610 3677,13333 \
3677,13275 3240.7,13263 3103.1,13261"];
	041421314050	 [height=0.5,
		label="<TABLE><TR><TD>$network = Get-VirtualPortGroup -Server $viConnection -Name $VMNetwork | Select -First 1</TD></TR></TABLE>\l",
		pos="2111,13653",
		shape=box,
		width=14.347];
	0414213140 -> 041421314050	 [label="True\l",
		lp="2386,13707",
		pos="e,2177.4,13671 2457.4,13747 2388.7,13728 2266.7,13695 2187.4,13674"];
	04142131405260	 [height=0.5,
		label="<TABLE><TR><TD>$network = Get-VDPortgroup -Server $viConnection -Name $VMNetwork | Select -First 1</TD></TR></TABLE>\l",
		pos="3147,13653",
		shape=box,
		width=13.931];
	0414213140 -> 04142131405260	 [label="False\l",
		lp="2628,13707",
		pos="e,2768.1,13671 2526,13744 2544.6,13727 2576.2,13701 2609,13689 2626.5,13683 2685.2,13677 2757.7,13672"];
	04142230	 [height=0.94444,
		label="<TABLE><TR><TD>$datacenter = Get-Datacenter -Name $VMDatacenter\n        $resourcePool = Get-ResourcePool -Server $viConnection \
-Name $VMResourcePool\n        $folder = Get-Folder -Server $viConnection -Name $VMFolder\n        $vmhost = (Get-Cluster -Server $\
viConnection -Name \"Cluster-1\") | Get-VMHost | Select -First 1</TD></TR></TABLE>\l",
		pos="3060,13068",
		shape=box,
		width=12.847];
	041422 -> 04142230	 [label="True\l",
		lp="3077,13128",
		pos="e,3060,13102 3060,13154 3060,13142 3060,13127 3060,13113"];
	0414223140	 [height=0.94444,
		label="<TABLE><TR><TD>$cluster = Get-Cluster -Server $viConnection -Name $VMCluster\n        $datacenter = $cluster | Get-Datacenter\n        $\
vmhost = $cluster | Get-VMHost | Select -First 1\n        $vmhostfullcluster = $cluster | Get-VMHost</TD></TR></TABLE>\l",
		pos="2253,13068",
		shape=box,
		width=9.0556];
	041422 -> 0414223140	 [label="False\l",
		lp="2772,13128",
		pos="e,2517,13102 2972.5,13161 2866.4,13147 2682.5,13123 2527.1,13103"];
	end_0414213140	 [height=0.5,
		label="End If\l",
		pos="3062,13333",
		shape=mdiamond,
		width=0.84722];
	end_0414213140 -> end_041421	 [pos="e,3062,13278 3062,13315 3062,13307 3062,13297 3062,13288"];
	041421314051	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="2386,13566",
		shape=diamond,
		width=4.1873];
	041421314050 -> 041421314051	 [pos="e,2344.3,13579 2168,13635 2217,13619 2287.2,13597 2334.6,13582"];
	04142131405261	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="3087,13566",
		shape=diamond,
		width=4.1873];
	04142131405260 -> 04142131405261	 [pos="e,3098.6,13583 3134.6,13635 3125.8,13622 3114,13605 3104.3,13591"];
	04142131405160	 [height=0.5,
		label="<TABLE><TR><TD>$privateNetwork = Get-VirtualPortGroup -Server $viConnection -Name $PrivateVXLANVMNetwork | Select -First 1</TD></\
TR></TABLE>\l",
		pos="1871,13479",
		shape=box,
		width=16.569];
	041421314051 -> 04142131405160	 [label="True\l",
		lp="2177,13522",
		pos="e,1977.9,13497 2323.4,13555 2240.3,13541 2092,13516 1987.9,13499"];
	end_041421314051	 [height=0.5,
		label="End If\l",
		pos="2705,13406",
		shape=mdiamond,
		width=0.84722];
	end_041421314051 -> end_0414213140	 [pos="e,3031.5,13339 2735.7,13400 2800.1,13387 2949.2,13356 3021.4,13341"];
	04142131405160 -> end_041421314051	 [pos="e,2674.2,13409 2076.9,13461 2274.8,13444 2559,13419 2664,13410"];
	0414213140526170	 [height=0.5,
		label="<TABLE><TR><TD>$privateNetwork = Get-VDPortgroup -Server $viConnection -Name $PrivateVXLANVMNetwork | Select -First 1</TD></TR></\
TABLE>\l",
		pos="3067,13479",
		shape=box,
		width=16.153];
	04142131405261 -> 0414213140526170	 [label="True\l",
		lp="3096,13522",
		pos="e,3071.2,13497 3083,13548 3080.2,13537 3076.6,13521 3073.4,13507"];
	end_04142131405261	 [height=0.5,
		label="End If\l",
		pos="3063,13406",
		shape=mdiamond,
		width=0.84722];
	end_04142131405261 -> end_0414213140	 [pos="e,3062.2,13351 3062.8,13388 3062.6,13380 3062.5,13370 3062.4,13361"];
	0414213140526170 -> end_04142131405261	 [pos="e,3064,13424 3066,13461 3065.6,13453 3065,13443 3064.5,13434"];
	end_041422	 [height=0.5,
		label="End If\l",
		pos="2253,12944",
		shape=mdiamond,
		width=0.84722];
	041423	 [height=0.5,
		label="If $datastore.Type -eq \"vsan\" -and $DeploymentTarget -ne \"VMC\"\l",
		pos="2238,12871",
		shape=diamond,
		width=12.485];
	end_041422 -> 041423	 [pos="e,2241.7,12889 2249.3,12926 2247.6,12918 2245.6,12908 2243.7,12899"];
	04142230 -> end_041422	 [pos="e,2283.6,12949 2838.7,13034 2649.4,13005 2392.3,12965 2293.8,12950"];
	0414223140 -> end_041422	 [pos="e,2253,12962 2253,13034 2253,13014 2253,12990 2253,12972"];
	04142330	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"VSAN Datastore detected, enabling Fake SCSI Reservations ...\"\n        Get-AdvancedSetting -Entity $vmhostfullcluster \
-Name \"VSAN.FakeSCSIReservations\" | Set-AdvancedSetting -Value 1 -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile</\
TD></TR></TABLE>\l",
		pos="2151,12783",
		shape=box,
		width=21.472];
	041423 -> 04142330	 [label="True\l",
		lp="2220,12828",
		pos="e,2170,12802 2220.8,12854 2208.3,12841 2191.2,12824 2177.1,12809"];
	end_041423	 [height=0.5,
		label="End If\l",
		pos="1851,12709",
		shape=mdiamond,
		width=0.84722];
	end_041423 -> end_04	 [pos="e,1459.6,12641 1820.3,12704 1745.5,12691 1553.6,12658 1469.5,12643"];
	04142330 -> end_041423	 [pos="e,1881.7,12717 2073.7,12764 2015.5,12750 1938,12730 1891.4,12719"];
	end_05	 [height=0.5,
		label="End If\l",
		pos="2409,10896",
		shape=mdiamond,
		width=0.84722];
	06	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="2409,10823",
		shape=diamond,
		width=4.1873];
	end_05 -> 06	 [pos="e,2409,10841 2409,10878 2409,10870 2409,10860 2409,10851"];
	051020	 [height=19.208,
		label="<TABLE><TR><TD>$NestedESXiHostnameToIPs.GetEnumerator() | Sort-Object -Property Value | Foreach-Object {\n            $VMName = $_\
.Key\n            $VMIPAddress = $_.Value\n\n            My-Logger \"Deploying Nested ESXi VM $VMName ...\"\n            $vm = Import-VApp \
-Server $viConnection -Source $NestedESXiApplianceOVA -Name $VMName -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin\n\n            \
My-Logger \"Updating VM Network ...\"\n            $vm | Get-NetworkAdapter -Name \"Network adapter 1\" | Set-NetworkAdapter -Portgroup $\
network -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n            sleep 5\n\n            if($DeployNSX -eq 1) {\n                $\
vm | Get-NetworkAdapter -Name \"Network adapter 2\" | Set-NetworkAdapter -Portgroup $privateNetwork -confirm:$false | Out-File -Append \
-LiteralPath $verboseLogFile\n            } else {\n                $vm | Get-NetworkAdapter -Name \"Network adapter 2\" | Set-NetworkAdapter \
-Portgroup $network -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n            }\n\n            My-Logger \"Updating \
vCPU Count to $NestedESXivCPU & vMEM to $NestedESXivMEM GB ...\"\n            Set-VM -Server $viConnection -VM $vm -NumCpu $NestedESXivCPU \
-MemoryGB $NestedESXivMEM -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n            My-Logger \"Updating vSAN \
Caching VMDK size to $NestedESXiCachingvDisk GB ...\"\n            Get-HardDisk -Server $viConnection -VM $vm -Name \"Hard disk 2\" | \
Set-HardDisk -CapacityGB $NestedESXiCachingvDisk -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n            \
My-Logger \"Updating vSAN Capacity VMDK size to $NestedESXiCapacityvDisk GB ...\"\n            Get-HardDisk -Server $viConnection \
-VM $vm -Name \"Hard disk 3\" | Set-HardDisk -CapacityGB $NestedESXiCapacityvDisk -Confirm:$false | Out-File -Append -LiteralPath $\
verboseLogFile\n\n            $orignalExtraConfig = $vm.ExtensionData.Config.ExtraConfig\n            $a = New-Object VMware.Vim.OptionValue\n            $\
a.key = \"guestinfo.hostname\"\n            $a.value = $VMName\n            $b = New-Object VMware.Vim.OptionValue\n            $b.key = \"\
guestinfo.ipaddress\"\n            $b.value = $VMIPAddress\n            $c = New-Object VMware.Vim.OptionValue\n            $c.key = \"\
guestinfo.netmask\"\n            $c.value = $VMNetmask\n            $d = New-Object VMware.Vim.OptionValue\n            $d.key = \"\
guestinfo.gateway\"\n            $d.value = $VMGateway\n            $e = New-Object VMware.Vim.OptionValue\n            $e.key = \"\
guestinfo.dns\"\n            $e.value = $VMDNS\n            $f = New-Object VMware.Vim.OptionValue\n            $f.key = \"guestinfo.domain\"\n            $\
f.value = $VMDomain\n            $g = New-Object VMware.Vim.OptionValue\n            $g.key = \"guestinfo.ntp\"\n            $g.value = $\
VMNTP\n            $h = New-Object VMware.Vim.OptionValue\n            $h.key = \"guestinfo.syslog\"\n            $h.value = $VMSyslog\n            $\
i = New-Object VMware.Vim.OptionValue\n            $i.key = \"guestinfo.password\"\n            $i.value = $VMPassword\n            $\
j = New-Object VMware.Vim.OptionValue\n            $j.key = \"guestinfo.ssh\"\n            $j.value = $VMSSH\n            $k = New-Object \
VMware.Vim.OptionValue\n            $k.key = \"guestinfo.createvmfs\"\n            $k.value = $VMVMFS\n            $l = New-Object \
VMware.Vim.OptionValue\n            $l.key = \"ethernet1.filter4.name\"\n            $l.value = \"dvfilter-maclearn\"\n            $\
m = New-Object VMware.Vim.OptionValue\n            $m.key = \"ethernet1.filter4.onFailure\"\n            $m.value = \"failOpen\"\n            $\
orignalExtraConfig+=$a\n            $orignalExtraConfig+=$b\n            $orignalExtraConfig+=$c\n            $orignalExtraConfig+=$\
d\n            $orignalExtraConfig+=$e\n            $orignalExtraConfig+=$f\n            $orignalExtraConfig+=$g\n            $orignalExtraConfig+=$\
h\n            $orignalExtraConfig+=$i\n            $orignalExtraConfig+=$j\n            $orignalExtraConfig+=$k\n            $orignalExtraConfig+=$\
l\n            $orignalExtraConfig+=$m\n\n            $spec = New-Object VMware.Vim.VirtualMachineConfigSpec\n            $spec.ExtraConfig = $\
orignalExtraConfig\n\n            My-Logger \"Adding guestinfo customization properties to $vmname ...\"\n            $task = $vm.ExtensionData.ReconfigVM_\
Task($spec)\n            $task1 = Get-Task -Id (\"Task-$($task.value)\")\n            $task1 | Wait-Task | Out-Null\n\n            \
My-Logger \"Powering On $vmname ...\"\n            Start-VM -Server $viConnection -VM $vm -Confirm:$false | Out-File -Append -LiteralPath $\
verboseLogFile\n        }</TD></TR></TABLE>\l",
		pos="940,11716",
		shape=box,
		width=19.875];
	0510 -> 051020	 [label="True\l",
		lp="1420,12432",
		pos="e,1384.8,12407 1417.9,12459 1411.2,12448 1401.9,12434 1390.3,12416"];
	05102130	 [height=10.222,
		label="<TABLE><TR><TD>$NestedESXiHostnameToIPs.GetEnumerator() | Sort-Object -Property Value | Foreach-Object {\n            $VMName = $_\
.Key\n            $VMIPAddress = $_.Value\n\n            $ovfconfig = Get-OvfConfiguration $NestedESXiApplianceOVA\n            $\
networkMapLabel = ($ovfconfig.ToHashTable().keys | where {$_ -Match \"NetworkMapping\"}).replace(\"NetworkMapping.\",\"\").replace(\"-\",\"_\")\
.replace(\" \",\"_\")\n            $ovfconfig.NetworkMapping.$networkMapLabel.value = $VMNetwork\n\n            $ovfconfig.common.guestinfo.hostname.value = $\
VMName\n            $ovfconfig.common.guestinfo.ipaddress.value = $VMIPAddress\n            $ovfconfig.common.guestinfo.netmask.value = $\
VMNetmask\n            $ovfconfig.common.guestinfo.gateway.value = $VMGateway\n            $ovfconfig.common.guestinfo.dns.value = $\
VMDNS\n            $ovfconfig.common.guestinfo.domain.value = $VMDomain\n            $ovfconfig.common.guestinfo.ntp.value = $VMNTP\n            $\
ovfconfig.common.guestinfo.syslog.value = $VMSyslog\n            $ovfconfig.common.guestinfo.password.value = $VMPassword\n            \
if($VMSSH -eq \"true\") {\n                $VMSSHVar = $true\n            } else {\n                $VMSSHVar = $false\n            }\n            $\
ovfconfig.common.guestinfo.ssh.value = $VMSSHVar\n\n            My-Logger \"Deploying Nested ESXi VM $VMName ...\"\n            if($\
DeploymentTarget -eq \"VMC\") {\n                $vm = Import-VApp -Source $NestedESXiApplianceOVA -OvfConfiguration $ovfconfig -Name $\
VMName -Location $resourcePool -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin -InventoryLocation $folder\n            } \
else {\n                $vm = Import-VApp -Source $NestedESXiApplianceOVA -OvfConfiguration $ovfconfig -Name $VMName -Location $\
cluster -VMHost $vmhost -Datastore $datastore -DiskStorageFormat thin\n            }\n\n            if($DeployNSX -eq 1) {\n                \
My-Logger \"Connecting Eth1 to $privateNetwork ...\"\n                $vm | Get-NetworkAdapter -Name \"Network adapter 2\" | Set-NetworkAdapter \
-Portgroup $privateNetwork -confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n            }\n\n            My-Logger \"\
Updating vCPU Count to $NestedESXivCPU & vMEM to $NestedESXivMEM GB ...\"\n            Set-VM -Server $viConnection -VM $vm -NumCpu $\
NestedESXivCPU -MemoryGB $NestedESXivMEM -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n            My-Logger \"\
Updating vSAN Caching VMDK size to $NestedESXiCachingvDisk GB ...\"\n            Get-HardDisk -Server $viConnection -VM $vm -Name \"\
Hard disk 2\" | Set-HardDisk -CapacityGB $NestedESXiCachingvDisk -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n            \
My-Logger \"Updating vSAN Capacity VMDK size to $NestedESXiCapacityvDisk GB ...\"\n            Get-HardDisk -Server $viConnection \
-VM $vm -Name \"Hard disk 3\" | Set-HardDisk -CapacityGB $NestedESXiCapacityvDisk -Confirm:$false | Out-File -Append -LiteralPath $\
verboseLogFile\n\n            My-Logger \"Powering On $vmname ...\"\n            $vm | Start-Vm -RunAsync | Out-Null\n        }</TD></\
TR></TABLE>\l",
		pos="2520,11716",
		shape=box,
		width=23.5];
	0510 -> 05102130	 [label="False\l",
		lp="1641,12432",
		pos="e,2131.1,12084 1498.1,12463 1546.4,12453 1611.5,12435 1664,12407 1825.7,12322 1986,12204 2123.4,12090"];
	0610	 [height=0.5,
		label="If $DeploymentTarget -eq \"VCENTER\" -or $DeploymentTarget -eq \"VMC\"\l",
		pos="2409,10736",
		shape=diamond,
		width=13.941];
	06 -> 0610	 [label="True\l",
		lp="2426,10780",
		pos="e,2409,10754 2409,10805 2409,10793 2409,10778 2409,10764"];
	end_0510	 [height=0.5,
		label="End If\l",
		pos="2409,10969",
		shape=mdiamond,
		width=0.84722];
	end_0510 -> end_05	 [pos="e,2409,10914 2409,10951 2409,10943 2409,10933 2409,10924"];
	051020 -> end_0510	 [pos="e,2378.4,10970 1655.8,11028 1658.8,11027 1661.9,11025 1665,11024 1729.4,10995 2221.7,10976 2368.1,10970"];
	05102130 -> end_0510	 [pos="e,2411.7,10987 2465.3,11347 2443.7,11203 2422.1,11057 2413.2,10997"];
	end_06	 [height=0.5,
		label="End If\l",
		pos="2018,9338",
		shape=mdiamond,
		width=0.84722];
	07	 [height=0.5,
		label="If $upgradeESXi -eq 1\l",
		pos="2018,9265",
		shape=diamond,
		width=4.4937];
	end_06 -> 07	 [pos="e,2018,9283.1 2018,9320 2018,9311.9 2018,9302.2 2018,9293.2"];
	061020	 [height=2.2083,
		label="<TABLE><TR><TD>$ovfconfig = Get-OvfConfiguration $NSXOVA\n        $ovfconfig.NetworkMapping.VSMgmt.value = $VMNetwork\n\n        $\
ovfconfig.common.vsm_hostname.value = $NSXHostname\n        $ovfconfig.common.vsm_ip_0.value = $NSXIPAddress\n        $ovfconfig.common.vsm_\
netmask_0.value = $NSXNetmask\n        $ovfconfig.common.vsm_gateway_0.value = $NSXGateway\n        $ovfconfig.common.vsm_dns1_0.value = $\
VMDNS\n        $ovfconfig.common.vsm_domain_0.value = $VMDomain\n        $ovfconfig.common.vsm_ntp_0 = $VMNTP</TD></TR></TABLE>\l",
		pos="2409,10588",
		shape=box,
		width=7.4861];
	0610 -> 061020	 [label="True\l",
		lp="2426,10692",
		pos="e,2409,10667 2409,10718 2409,10707 2409,10693 2409,10677"];
	0710	 [height=9.1528,
		label="<TABLE><TR><TD>sleep 60\n    $NestedESXiHostnameToIPs.GetEnumerator() | Sort-Object -Property Value | Foreach-Object {\n        $\
VMName = $_.Key\n        $VMIPAddress = $_.Value\n\n        My-Logger \"Connecting directly to $VMName for ESXi upgrade ...\"\n        \
while(1) {\n            try {\n                $results = Invoke-WebRequest -Uri https://$VMIPAddress/ui -Method GET\n                \
if($results.StatusCode -eq 200) {\n                    break\n                }\n            }\n            catch {\n                \
My-Logger \"$VMName is not ready yet, sleeping 30seconds ...\"\n                sleep 30\n            }\n        }\n        # This \
is apparently needed due to patching using online image profile taking longer\n        Set-PowerCLIConfiguration -WebOperationTimeoutSeconds \
900 -Scope Session -Confirm:$false | Out-Null\n\n        $vESXi = Connect-VIServer -Server $VMIPAddress -User root -Password $VMPassword \
-WarningAction SilentlyContinue\n\n        My-Logger \"Entering Maintenance Mode ...\"\n        Set-VMHost -VMhost $VMIPAddress -State \
Maintenance -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n        if($offlineUpgrade -eq 1) {\n            \
My-Logger \"Upgrading $VMname using offline bundle $ESXi65OfflineBundle ...\"\n            Install-VMHostPatch -VMHost $VMIPAddress \
-LocalPath $ESXi65OfflineBundle -HostUsername root -HostPassword $VMPassword -WarningAction SilentlyContinue -Confirm:$false | Out-File \
-Append -LiteralPath $verboseLogFile\n        }\n        else {\n            My-Logger \"Upgrading $VMName using Image Profile $ESXiProfileName \
...\"\n            $esxcli = Get-EsxCli -VMHost $VMIPAddress -V2\n            $esxcli.network.firewall.ruleset.set.Invoke(@{enabled = '\
true' ; rulesetid = 'httpClient'}) | Out-Null \n            $esxcli.software.profile.update.Invoke(@{profile = $ESXiProfileName; \
depot = $depotServer}) | Out-File -Append -LiteralPath $verboseLogFile\n        }\n\n        My-Logger \"Rebooting $VMName ...\"\n        \
Restart-VMHost $VMIPAddress -RunAsync -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n        My-Logger \"Disconnecting \
from new ESXi host ...\"\n        Disconnect-VIServer $vESXi -Confirm:$false\n    }</TD></TR></TABLE>\l",
		pos="2018,8866.5",
		shape=box,
		width=23.833];
	07 -> 0710	 [label="True\l",
		lp="2035,9221.5",
		pos="e,2018,9196.3 2018,9246.8 2018,9236.7 2018,9222.8 2018,9206.3"];
	end_0610	 [height=0.5,
		label="End If\l",
		pos="2018,9411",
		shape=mdiamond,
		width=0.84722];
	end_0610 -> end_06	 [pos="e,2018,9356.1 2018,9393 2018,9384.9 2018,9375.2 2018,9366.2"];
	061021	 [height=0.5,
		label="If $NSXSSHEnable -eq \"true\"\l",
		pos="2409,10453",
		shape=diamond,
		width=5.8724];
	061020 -> 061021	 [pos="e,2409,10471 2409,10508 2409,10498 2409,10489 2409,10481"];
	06102130	 [height=0.5,
		label="<TABLE><TR><TD>$NSXSSHEnableVar = $true</TD></TR></TABLE>\l",
		pos="2256,10366",
		shape=box,
		width=7.8472];
	061021 -> 06102130	 [label="True\l",
		lp="2359,10410",
		pos="e,2287.7,10384 2381.3,10437 2357.6,10424 2323.2,10404 2296.5,10389"];
	0610213140	 [height=0.5,
		label="<TABLE><TR><TD>$NSXSSHEnableVar = $false</TD></TR></TABLE>\l",
		pos="2841,10366",
		shape=box,
		width=7.9028];
	061021 -> 0610213140	 [label="False\l",
		lp="2670,10410",
		pos="e,2751.4,10384 2471.8,10440 2542.5,10426 2658.4,10403 2741.5,10386"];
	end_061021	 [height=0.5,
		label="End If\l",
		pos="2683,10293",
		shape=mdiamond,
		width=0.84722];
	061022	 [height=0.5,
		label="<TABLE><TR><TD>$ovfconfig.common.vsm_isSSHEnabled.value = $NSXSSHEnableVar</TD></TR></TABLE>\l",
		pos="2683,10220",
		shape=box,
		width=11.847];
	end_061021 -> 061022	 [pos="e,2683,10238 2683,10275 2683,10267 2683,10257 2683,10248"];
	06102130 -> end_061021	 [pos="e,2652.4,10298 2361.6,10348 2452.3,10332 2578.4,10311 2642.3,10300"];
	0610213140 -> end_061021	 [pos="e,2713.7,10307 2801.9,10348 2777.9,10337 2747.2,10323 2723,10311"];
	061023	 [height=0.5,
		label="If $NSXCEIPEnable -eq \"true\"\l",
		pos="2683,10147",
		shape=diamond,
		width=6.0256];
	061022 -> 061023	 [pos="e,2683,10165 2683,10202 2683,10194 2683,10184 2683,10175"];
	06102330	 [height=0.5,
		label="<TABLE><TR><TD>$NSXCEIPEnableVar = $true</TD></TR></TABLE>\l",
		pos="2559,10060",
		shape=box,
		width=7.9167];
	061023 -> 06102330	 [label="True\l",
		lp="2646,10104",
		pos="e,2584.9,10078 2660,10131 2641.3,10118 2614.6,10099 2593.3,10084"];
	0610233140	 [height=0.5,
		label="<TABLE><TR><TD>$NSXCEIPEnableVar = $false</TD></TR></TABLE>\l",
		pos="3149,10060",
		shape=box,
		width=7.9722];
	061023 -> 0610233140	 [label="False\l",
		lp="2963,10104",
		pos="e,3052.4,10078 2749.8,10135 2826.2,10120 2952.4,10097 3042.4,10080"];
	end_061023	 [height=0.5,
		label="End If\l",
		pos="2683,9987",
		shape=mdiamond,
		width=0.84722];
	061024	 [height=1.1667,
		label="<TABLE><TR><TD>$ovfconfig.common.vsm_isCEIPEnabled.value = $NSXCEIPEnableVar\n        $ovfconfig.common.vsm_cli_passwd_0.value = $\
NSXUIPassword\n        $ovfconfig.common.vsm_cli_en_passwd_0.value = $NSXCLIPassword\n\n        My-Logger \"Deploying NSX VM $NSXDisplayName \
...\"</TD></TR></TABLE>\l",
		pos="2683,9890",
		shape=box,
		width=9.5278];
	end_061023 -> 061024	 [pos="e,2683,9932.3 2683,9968.8 2683,9961.2 2683,9952 2683,9942.5"];
	06102330 -> end_061023	 [pos="e,2652.3,10005 2589.7,10042 2605.9,10032 2626,10021 2643.5,10010"];
	0610233140 -> end_061023	 [pos="e,2713.9,9991.8 3033.8,10042 2933.1,10026 2792.4,10004 2723.9,9993.4"];
	061025	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="2683,9793",
		shape=diamond,
		width=6.5107];
	061024 -> 061025	 [pos="e,2683,9811.1 2683,9847.7 2683,9838.8 2683,9829.6 2683,9821.3"];
	06102530	 [height=0.5,
		label="<TABLE><TR><TD>$vm = Import-VApp -Source $NSXOVA -OvfConfiguration $ovfconfig -Name $NSXDisplayName -Location $resourcePool -VMHost $\
vmhost -Datastore $datastore -DiskStorageFormat thin -InventoryLocation $folder</TD></TR></TABLE>\l",
		pos="1051,9706",
		shape=box,
		width=26.347];
	061025 -> 06102530	 [label="True\l",
		lp="1982,9749.5",
		pos="e,1388.8,9724 2544.6,9785.6 2293.5,9772.2 1756,9743.6 1399,9724.6"];
	0610253140	 [height=0.5,
		label="<TABLE><TR><TD>$vm = Import-VApp -Source $NSXOVA -OvfConfiguration $ovfconfig -Name $NSXDisplayName -Location $cluster -VMHost $\
vmhost -Datastore $datastore -DiskStorageFormat thin</TD></TR></TABLE>\l",
		pos="2847,9706",
		shape=box,
		width=23.028];
	061025 -> 0610253140	 [label="False\l",
		lp="2794,9749.5",
		pos="e,2813,9724 2712.7,9777.2 2738.2,9763.7 2775.2,9744.1 2804,9728.8"];
	end_061025	 [height=0.5,
		label="End If\l",
		pos="2018,9619",
		shape=mdiamond,
		width=0.84722];
	061026	 [height=1.1667,
		label="<TABLE><TR><TD>My-Logger \"Updating vCPU Count to $NSXvCPU & vMEM to $NSXvMEM GB ...\"\n        Set-VM -Server $viConnection -VM $\
vm -NumCpu $NSXvCPU -MemoryGB $NSXvMEM -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n        My-Logger \"Powering \
On $NSXDisplayName ...\"\n        $vm | Start-Vm -RunAsync | Out-Null</TD></TR></TABLE>\l",
		pos="2018,9522",
		shape=box,
		width=15.931];
	end_061025 -> 061026	 [pos="e,2018,9564.3 2018,9600.8 2018,9593.2 2018,9584 2018,9574.5"];
	06102530 -> end_061025	 [pos="e,1987.1,9621.8 1251.1,9688 1484.6,9667 1854.5,9633.7 1977,9622.7"];
	0610253140 -> end_061025	 [pos="e,2048.5,9622.2 2675.5,9688 2478.6,9667.3 2168.8,9634.8 2058.6,9623.3"];
	061026 -> end_0610	 [pos="e,2018,9429.1 2018,9479.7 2018,9466.2 2018,9451.5 2018,9439.2"];
	end_07	 [height=0.5,
		label="End If\l",
		pos="2018,8482",
		shape=mdiamond,
		width=0.84722];
	08	 [height=0.5,
		label="If $deployVCSA -eq 1\l",
		pos="2018,8409",
		shape=diamond,
		width=4.3405];
	end_07 -> 08	 [pos="e,2018,8427.1 2018,8464 2018,8455.9 2018,8446.2 2018,8437.2"];
	0710 -> end_07	 [pos="e,2018,8500.2 2018,8536.7 2018,8526.8 2018,8517.9 2018,8510.4"];
	0810	 [height=0.5,
		label="If $DeploymentTarget -eq \"ESXI\"\l",
		pos="2018,8322",
		shape=diamond,
		width=6.5362];
	08 -> 0810	 [label="True\l",
		lp="2035,8365.5",
		pos="e,2018,8340 2018,8391 2018,8379.2 2018,8363.6 2018,8350.2"];
	end_08	 [height=0.5,
		label="End If\l",
		pos="1845,6145",
		shape=mdiamond,
		width=0.84722];
	09	 [height=0.5,
		label="If $moveVMsIntovApp -eq 1 -and ($DeploymentTarget -eq \"VCENTER\" -or $DeploymentTarget -eq \"VMC\")\l",
		pos="1845,6072",
		shape=diamond,
		width=19.966];
	end_08 -> 09	 [pos="e,1845,6090.1 1845,6127 1845,6118.9 1845,6109.2 1845,6100.2"];
	081020	 [height=3.8611,
		label="<TABLE><TR><TD># Deploy using the VCSA CLI Installer\n        $config = (Get-Content -Raw \"$($VCSAInstallerPath)\\vcsa-cli-installer\\templates\\install\\embedded_\
vCSA_on_ESXi.json\") | convertfrom-json\n        $config.new_vcsa.esxi.hostname = $VIServer\n        $config.new_vcsa.esxi.username = $\
VIUsername\n        $config.new_vcsa.esxi.password = $VIPassword\n        $config.new_vcsa.esxi.deployment_network = $VMNetwork\n        $\
config.new_vcsa.esxi.datastore = $datastore\n        $config.new_vcsa.appliance.thin_disk_mode = $true\n        $config.new_vcsa.appliance.deployment_\
option = $VCSADeploymentSize\n        $config.new_vcsa.appliance.name = $VCSADisplayName\n        $config.new_vcsa.network.ip_family = \"\
ipv4\"\n        $config.new_vcsa.network.mode = \"static\"\n        $config.new_vcsa.network.ip = $VCSAIPAddress\n        $config.new_\
vcsa.network.dns_servers[0] = $VMDNS\n        $config.new_vcsa.network.prefix = $VCSAPrefix\n        $config.new_vcsa.network.gateway = $\
VMGateway\n        $config.new_vcsa.network.system_name = $VCSAHostname\n        $config.new_vcsa.os.password = $VCSARootPassword</\
TD></TR></TABLE>\l",
		pos="1559,8114",
		shape=box,
		width=14.667];
	0810 -> 081020	 [label="True\l",
		lp="1948,8278.5",
		pos="e,1865.7,8253 1983.9,8306.5 1957.7,8294.7 1918.8,8277 1874.9,8257.1"];
	08102530	 [height=1.7778,
		label="<TABLE><TR><TD># Deploy using the VCSA CLI Installer\n        $config = (Get-Content -Raw \"$($VCSAInstallerPath)\\vcsa-cli-installer\\templates\\install\\embedded_\
vCSA_on_VC.json\") | convertfrom-json\n        $config.new_vcsa.vc.hostname = $VIServer\n        $config.new_vcsa.vc.username = $\
VIUsername\n        $config.new_vcsa.vc.password = $VIPassword\n        $config.new_vcsa.vc.deployment_network = $VMNetwork\n        $\
config.new_vcsa.vc.datastore = $datastore\n        $config.new_vcsa.vc.datacenter = $datacenter.name</TD></TR></TABLE>\l",
		pos="2626,8114",
		shape=box,
		width=14.472];
	0810 -> 08102530	 [label="False\l",
		lp="2184,8278.5",
		pos="e,2438.7,8178.1 2061.2,8307.2 2137,8281.3 2298.1,8226.2 2429,8181.4"];
	0910	 [height=0.5,
		label="<TABLE><TR><TD>My-Logger \"Creating vApp $VAppName ...\"</TD></TR></TABLE>\l",
		pos="1845,5985",
		shape=box,
		width=9.3056];
	09 -> 0910	 [label="True\l",
		lp="1862,6028.5",
		pos="e,1845,6003 1845,6054 1845,6042.2 1845,6026.6 1845,6013.2"];
	end_0810	 [height=0.5,
		label="End If\l",
		pos="1845,6232",
		shape=mdiamond,
		width=0.84722];
	end_0810 -> end_08	 [pos="e,1845,6163 1845,6214 1845,6202.2 1845,6186.6 1845,6173.2"];
	081021	 [height=0.5,
		label="If $VCSASSHEnable -eq \"true\"\l",
		pos="1559,7920",
		shape=diamond,
		width=6.1022];
	081020 -> 081021	 [pos="e,1559,7938.2 1559,7974.8 1559,7965.1 1559,7956.1 1559,7948.3"];
	08102531	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="2626,7920",
		shape=diamond,
		width=6.5107];
	08102530 -> 08102531	 [pos="e,2626,7938.3 2626,8049.9 2626,8015.6 2626,7975 2626,7948.5"];
	08102130	 [height=0.5,
		label="<TABLE><TR><TD>$VCSASSHEnableVar = $true</TD></TR></TABLE>\l",
		pos="1240,7832",
		shape=box,
		width=7.9722];
	081021 -> 08102130	 [label="True\l",
		lp="1446,7876.5",
		pos="e,1305.5,7850.1 1508.5,7906.1 1456.4,7891.7 1374.8,7869.2 1315.2,7852.8"];
	0810213140	 [height=0.5,
		label="<TABLE><TR><TD>$VCSASSHEnableVar = $false</TD></TR></TABLE>\l",
		pos="1834,7832",
		shape=box,
		width=8.0278];
	081021 -> 0810213140	 [label="False\l",
		lp="1732,7876.5",
		pos="e,1777.3,7850.1 1603.8,7905.7 1648.3,7891.4 1716.9,7869.5 1767.7,7853.2"];
	end_081021	 [height=0.5,
		label="End If\l",
		pos="1666,7758",
		shape=mdiamond,
		width=0.84722];
	081022	 [height=1.5833,
		label="<TABLE><TR><TD>$config.new_vcsa.os.ntp_servers = $VMNTP\n        $config.new_vcsa.os.ssh_enable = $VCSASSHEnableVar\n        $config.new_\
vcsa.sso.password = $VCSASSOPassword\n        $config.new_vcsa.sso.domain_name = $VCSASSODomainName\n\n        My-Logger \"Creating \
VCSA JSON Configuration file for deployment ...\"\n        $config | ConvertTo-Json | Set-Content -Path \"$($ENV:Temp)\\jsontemplate.json\"</\
TD></TR></TABLE>\l",
		pos="1666,7616.5",
		shape=box,
		width=11.139];
	end_081021 -> 081022	 [pos="e,1666,7673.8 1666,7739.8 1666,7725.4 1666,7704.4 1666,7683.8"];
	08102130 -> end_081021	 [pos="e,1635.3,7763.3 1343.7,7814 1434.2,7798.3 1560.8,7776.3 1625.1,7765.1"];
	0810213140 -> end_081021	 [pos="e,1696.7,7771.5 1792.9,7813.9 1766.4,7802.2 1732.2,7787.2 1705.9,7775.6"];
	081023	 [height=0.5,
		label="If $enableVerboseLoggingToNewShell -eq 1\l",
		pos="1666,7475",
		shape=diamond,
		width=8.4256];
	081022 -> 081023	 [pos="e,1666,7493.3 1666,7559.4 1666,7540.2 1666,7519.6 1666,7503.5"];
	08102330	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Spawning new PowerShell Console for detailed verbose output ...\"\n            Start-process powershell.exe \
-argument \"-nologo -noprofile -executionpolicy bypass -command Get-Content $verboseLogFile -Tail 2 -Wait\"</TD></TR></TABLE>\l",
		pos="1666,7387",
		shape=box,
		width=17.167];
	081023 -> 08102330	 [label="True\l",
		lp="1683,7431.5",
		pos="e,1666,7406.1 1666,7456.8 1666,7445.1 1666,7429.7 1666,7416.3"];
	end_081023	 [height=0.5,
		label="End If\l",
		pos="1666,7313",
		shape=mdiamond,
		width=0.84722];
	081024	 [height=0.73611,
		label="<TABLE><TR><TD>My-Logger \"Deploying VCSA ...\"\n        Invoke-Expression \"$($VCSAInstallerPath)\\vcsa-cli-installer\\win32\\vcsa-deploy.exe \
install --no-ssl-certificate-verification --accept-eula --acknowledge-ceip $($ENV:Temp)\\jsontemplate.json\"| Out-File -Append -LiteralPath $\
verboseLogFile\n    } else</TD></TR></TABLE>\l",
		pos="1666,7145.5",
		shape=box,
		width=24.236];
	end_081023 -> 081024	 [pos="e,1666,7172.3 1666,7294.8 1666,7267.9 1666,7217.3 1666,7182.5"];
	08102330 -> end_081023	 [pos="e,1666,7331.2 1666,7367.9 1666,7359.8 1666,7350.2 1666,7341.2"];
	081024 -> end_0810	 [pos="e,1814.2,6238.1 1666,7118.9 1666,7097.5 1666,7066.6 1666,7039.5 1666,7039.5 1666,7039.5 1666,6306 1666,6276.2 1751.7,6252.2 1804.5,\
6240.3"];
	0810253140	 [height=0.52778,
		label="<TABLE><TR><TD>#$VMCResourcePool = @(\"Cluster-1\",\"Resources\",\"Compute-ResourcePool\")\n            $config.new_vcsa.vc.target = \"\
VMC_REPLACE\"</TD></TR></TABLE>\l",
		pos="2564,7832",
		shape=box,
		width=10.236];
	08102531 -> 0810253140	 [label="True\l",
		lp="2618,7876.5",
		pos="e,2577.5,7851.2 2613.8,7902.6 2605.1,7890.3 2593.3,7873.6 2583.4,7859.5"];
	081025314150	 [height=0.5,
		label="<TABLE><TR><TD>$config.new_vcsa.vc.target = $VMCluster</TD></TR></TABLE>\l",
		pos="3282,7832",
		shape=box,
		width=9.1944];
	08102531 -> 081025314150	 [label="False\l",
		lp="3013,7876.5",
		pos="e,3147.7,7850 2711.4,7908.5 2819.5,7894 3007.1,7868.9 3137.6,7851.4"];
	end_08102531	 [height=0.5,
		label="End If\l",
		pos="2909,7758",
		shape=mdiamond,
		width=0.84722];
	08102532	 [height=2.4028,
		label="<TABLE><TR><TD>$config.new_vcsa.appliance.thin_disk_mode = $true\n        $config.new_vcsa.appliance.deployment_option = $VCSADeploymentSize\n        $\
config.new_vcsa.appliance.name = $VCSADisplayName\n        $config.new_vcsa.network.ip_family = \"ipv4\"\n        $config.new_vcsa.network.mode = \"\
static\"\n        $config.new_vcsa.network.ip = $VCSAIPAddress\n        $config.new_vcsa.network.dns_servers[0] = $VMDNS\n        $\
config.new_vcsa.network.prefix = $VCSAPrefix\n        $config.new_vcsa.network.gateway = $VMGateway\n        $config.new_vcsa.network.system_\
name = $VCSAHostname\n        $config.new_vcsa.os.password = $VCSARootPassword</TD></TR></TABLE>\l",
		pos="2909,7616.5",
		shape=box,
		width=8.6528];
	end_08102531 -> 08102532	 [pos="e,2909,7703.2 2909,7739.8 2909,7732.4 2909,7723.3 2909,7713.3"];
	0810253140 -> end_08102531	 [pos="e,2878.3,7764.6 2652.8,7812.9 2722.3,7798 2815.6,7778 2868.3,7766.7"];
	081025314150 -> end_08102531	 [pos="e,2939.7,7764.1 3191.2,7814 3114.1,7798.7 3007.1,7777.5 2949.5,7766"];
	08102533	 [height=0.5,
		label="If $VCSASSHEnable -eq \"true\"\l",
		pos="2909,7475",
		shape=diamond,
		width=6.1022];
	08102532 -> 08102533	 [pos="e,2909,7493.3 2909,7529.7 2909,7520.3 2909,7511.2 2909,7503.3"];
	0810253340	 [height=0.5,
		label="<TABLE><TR><TD>$VCSASSHEnableVar = $true</TD></TR></TABLE>\l",
		pos="3206,7387",
		shape=box,
		width=7.9722];
	08102533 -> 0810253340	 [label="True\l",
		lp="3093,7431.5",
		pos="e,3145,7405.1 2956.7,7460.9 3005,7446.6 3080.1,7424.3 3135.3,7407.9"];
	081025334150	 [height=0.5,
		label="<TABLE><TR><TD>$VCSASSHEnableVar = $false</TD></TR></TABLE>\l",
		pos="2612,7387",
		shape=box,
		width=8.0278];
	08102533 -> 081025334150	 [label="False\l",
		lp="2807,7431.5",
		pos="e,2673,7405.1 2861.3,7460.9 2813,7446.6 2737.9,7424.3 2682.7,7407.9"];
	end_08102533	 [height=0.5,
		label="End If\l",
		pos="2655,7313",
		shape=mdiamond,
		width=0.84722];
	08102534	 [height=0.94444,
		label="<TABLE><TR><TD>$config.new_vcsa.os.ntp_servers = $VMNTP\n        $config.new_vcsa.os.ssh_enable = $VCSASSHEnableVar\n        $config.new_\
vcsa.sso.password = $VCSASSOPassword\n        $config.new_vcsa.sso.domain_name = $VCSASSODomainName</TD></TR></TABLE>\l",
		pos="2655,7224",
		shape=box,
		width=9.5694];
	end_08102533 -> 08102534	 [pos="e,2655,7258.2 2655,7295 2655,7287.2 2655,7277.8 2655,7268.3"];
	0810253340 -> end_08102533	 [pos="e,2685.6,7317.1 3071.9,7369 2948.8,7352.5 2773.9,7329 2695.6,7318.5"];
	081025334150 -> end_08102533	 [pos="e,2644.5,7331.1 2622.6,7368.7 2627.7,7360 2633.8,7349.5 2639.4,7339.9"];
	08102535	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="2655,7083",
		shape=diamond,
		width=6.5107];
	08102534 -> 08102535	 [pos="e,2655,7101.3 2655,7189.9 2655,7165.8 2655,7134 2655,7111.3"];
	0810253540	 [height=0.5,
		label="<TABLE><TR><TD>$config.new_vcsa.vc | Add-Member -Type NoteProperty -Name 'vm_folder' -Value $VMCVMFolder</TD></TR></TABLE>\l",
		pos="2655,6996",
		shape=box,
		width=14.722];
	08102535 -> 0810253540	 [label="True\l",
		lp="2672,7039.5",
		pos="e,2655,7014 2655,7065 2655,7053.2 2655,7037.6 2655,7024.2"];
	end_08102535	 [height=0.5,
		label="End If\l",
		pos="2655,6923",
		shape=mdiamond,
		width=0.84722];
	08102536	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Creating VCSA JSON Configuration file for deployment ...\"\n        $config | ConvertTo-Json | Set-Content \
-Path \"$($ENV:Temp)\\jsontemplate.json\"</TD></TR></TABLE>\l",
		pos="2655,6849",
		shape=box,
		width=11.139];
	end_08102535 -> 08102536	 [pos="e,2655,6868.1 2655,6904.7 2655,6896.7 2655,6887.1 2655,6878.2"];
	0810253540 -> end_08102535	 [pos="e,2655,6941.1 2655,6978 2655,6969.9 2655,6960.2 2655,6951.2"];
	08102537	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="2655,6775",
		shape=diamond,
		width=6.5107];
	08102536 -> 08102537	 [pos="e,2655,6793.2 2655,6829.9 2655,6821.8 2655,6812.2 2655,6803.2"];
	0810253740	 [height=0.5,
		label="<TABLE><TR><TD>(Get-Content -Path \"$($ENV:Temp)\\jsontemplate.json\" -Raw) -replace '\"VMC_REPLACE\"',\"[`\"$VMCluster`\",`\"Resources`\",`\"$\
VMResourcePool`\"]\" | Set-Content -Path \"$($ENV:Temp)\\jsontemplate.json\"</TD></TR></TABLE>\l",
		pos="2655,6688",
		shape=box,
		width=25.069];
	08102537 -> 0810253740	 [label="True\l",
		lp="2672,6731.5",
		pos="e,2655,6706 2655,6757 2655,6745.2 2655,6729.6 2655,6716.2"];
	end_08102537	 [height=0.5,
		label="End If\l",
		pos="2655,6615",
		shape=mdiamond,
		width=0.84722];
	08102538	 [height=0.5,
		label="If $enableVerboseLoggingToNewShell -eq 1\l",
		pos="2655,6542",
		shape=diamond,
		width=8.4256];
	end_08102537 -> 08102538	 [pos="e,2655,6560.1 2655,6597 2655,6588.9 2655,6579.2 2655,6570.2"];
	0810253740 -> end_08102537	 [pos="e,2655,6633.1 2655,6670 2655,6661.9 2655,6652.2 2655,6643.2"];
	0810253840	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Spawning new PowerShell Console for detailed verbose output ...\"\n            Start-process powershell.exe \
-argument \"-nologo -noprofile -executionpolicy bypass -command Get-Content $verboseLogFile -Tail 2 -Wait\"</TD></TR></TABLE>\l",
		pos="2655,6454",
		shape=box,
		width=17.167];
	08102538 -> 0810253840	 [label="True\l",
		lp="2672,6498.5",
		pos="e,2655,6473.1 2655,6523.8 2655,6512.1 2655,6496.7 2655,6483.3"];
	end_08102538	 [height=0.5,
		label="End If\l",
		pos="2655,6380",
		shape=mdiamond,
		width=0.84722];
	08102539	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Deploying the VCSA ...\"\n        Invoke-Expression \"$($VCSAInstallerPath)\\vcsa-cli-installer\\win32\\vcsa-deploy.exe \
install --no-ssl-certificate-verification --accept-eula --acknowledge-ceip $($ENV:Temp)\\jsontemplate.json\"| Out-File -Append -LiteralPath $\
verboseLogFile</TD></TR></TABLE>\l",
		pos="2655,6306",
		shape=box,
		width=26.694];
	end_08102538 -> 08102539	 [pos="e,2655,6325.1 2655,6361.7 2655,6353.7 2655,6344.1 2655,6335.2"];
	0810253840 -> end_08102538	 [pos="e,2655,6398.2 2655,6434.9 2655,6426.8 2655,6417.2 2655,6408.2"];
	08102539 -> end_0810	 [pos="e,1875.6,6234.8 2446.9,6287 2255.7,6269.5 1986.9,6245 1885.7,6235.7"];
	end_09	 [height=0.5,
		label="End If\l",
		pos="1463,4899",
		shape=mdiamond,
		width=0.84722];
	010	 [height=0.5,
		label="If $setupNewVC -eq 1\l",
		pos="1463,4826",
		shape=diamond,
		width=4.4937];
	end_09 -> 010	 [pos="e,1463,4844.1 1463,4881 1463,4872.9 1463,4863.2 1463,4854.2"];
	0911	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="1845,5912",
		shape=diamond,
		width=6.5107];
	0910 -> 0911	 [pos="e,1845,5930.1 1845,5967 1845,5958.9 1845,5949.2 1845,5940.2"];
	01010	 [height=1.1667,
		label="<TABLE><TR><TD>My-Logger \"Connecting to the new VCSA ...\"\n    $vc = Connect-VIServer $VCSAIPAddress -User \"administrator@$VCSASSODomainName\" \
-Password $VCSASSOPassword -WarningAction SilentlyContinue\n\n    My-Logger \"Creating Datacenter $NewVCDatacenterName ...\"\n    \
New-Datacenter -Server $vc -Name $NewVCDatacenterName -Location (Get-Folder -Type Datacenter -Server $vc) | Out-File -Append -LiteralPath $\
verboseLogFile</TD></TR></TABLE>\l",
		pos="1463,4715",
		shape=box,
		width=19.236];
	010 -> 01010	 [label="True\l",
		lp="1480,4782.5",
		pos="e,1463,4757.4 1463,4807.7 1463,4796.7 1463,4782.1 1463,4767.7"];
	091120	 [height=0.5,
		label="<TABLE><TR><TD>$VApp = New-VApp -Name $VAppName -Server $viConnection -Location (Get-ResourcePool $VMResourcePool)</TD></TR></TABLE>\l",
		pos="1133,5825",
		shape=box,
		width=16.111];
	0911 -> 091120	 [label="True\l",
		lp="1549,5868.5",
		pos="e,1280.4,5843 1754.5,5900.9 1637.8,5886.7 1433,5861.7 1290.6,5844.3"];
	09112130	 [height=0.5,
		label="<TABLE><TR><TD>$VApp = New-VApp -Name $VAppName -Server $viConnection -Location $cluster</TD></TR></TABLE>\l",
		pos="2205,5825",
		shape=box,
		width=13.153];
	0911 -> 09112130	 [label="False\l",
		lp="2066,5868.5",
		pos="e,2130.3,5843.1 1901.6,5898.3 1960.4,5884.1 2053,5861.7 2120.5,5845.4"];
	end_0911	 [height=0.5,
		label="End If\l",
		pos="1463,5752",
		shape=mdiamond,
		width=0.84722];
	0912	 [height=0.5,
		label="If $deployNestedESXiVMs -eq 1\l",
		pos="1463,5679",
		shape=diamond,
		width=6.332];
	end_0911 -> 0912	 [pos="e,1463,5697.1 1463,5734 1463,5725.9 1463,5716.2 1463,5707.2"];
	091120 -> end_0911	 [pos="e,1432.2,5758.8 1214.6,5807 1280.6,5792.3 1370.8,5772.4 1422.4,5761"];
	09112130 -> end_0911	 [pos="e,1493.8,5755 2021.6,5807 1848.3,5789.9 1600.8,5765.6 1504,5756"];
	091220	 [height=1.1528,
		label="<TABLE><TR><TD>My-Logger \"Moving Nested ESXi VMs into $VAppName vApp ...\"\n        $NestedESXiHostnameToIPs.GetEnumerator() | Sort-Object \
-Property Value | Foreach-Object {\n            $vm = Get-VM -Name $_.Key -Server $viConnection\n            Move-VM -VM $vm -Server $\
viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n        }</TD></TR></TABLE>\l",
		pos="1463,5568.5",
		shape=box,
		width=13.583];
	0912 -> 091220	 [label="True\l",
		lp="1480,5635.5",
		pos="e,1463,5610.2 1463,5660.8 1463,5649.7 1463,5635 1463,5620.6"];
	end_0912	 [height=0.5,
		label="End If\l",
		pos="1463,5472",
		shape=mdiamond,
		width=0.84722];
	0913	 [height=0.5,
		label="If $deployVCSA -eq 1\l",
		pos="1463,5399",
		shape=diamond,
		width=4.3405];
	end_0912 -> 0913	 [pos="e,1463,5417.1 1463,5454 1463,5445.9 1463,5436.2 1463,5427.2"];
	091220 -> end_0912	 [pos="e,1463,5490.1 1463,5526.7 1463,5517.8 1463,5508.6 1463,5500.3"];
	091320	 [height=0.73611,
		label="<TABLE><TR><TD>$vcsaVM = Get-VM -Name $VCSADisplayName -Server $viConnection\n        My-Logger \"Moving $VCSADisplayName into $VAppName \
vApp ...\"\n        Move-VM -VM $vcsaVM -Server $viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $\
verboseLogFile</TD></TR></TABLE>\l",
		pos="1463,5303.5",
		shape=box,
		width=16.278];
	0913 -> 091320	 [label="True\l",
		lp="1480,5355.5",
		pos="e,1463,5330.2 1463,5380.6 1463,5369.2 1463,5354.1 1463,5340.4"];
	end_0913	 [height=0.5,
		label="End If\l",
		pos="1463,5222",
		shape=mdiamond,
		width=0.84722];
	0914	 [height=0.5,
		label="If $DeployNSX -eq 1\l",
		pos="1463,5149",
		shape=diamond,
		width=4.1873];
	end_0913 -> 0914	 [pos="e,1463,5167.1 1463,5204 1463,5195.9 1463,5186.2 1463,5177.2"];
	091320 -> end_0913	 [pos="e,1463,5240.5 1463,5276.8 1463,5268.5 1463,5259.2 1463,5250.7"];
	091420	 [height=0.73611,
		label="<TABLE><TR><TD>$nsxVM = Get-VM -Name $NSXDisplayName -Server $viConnection\n        My-Logger \"Moving $NSXDisplayName into $VAppName \
vApp ...\"\n        Move-VM -VM $nsxVM -Server $viConnection -Destination $VApp -Confirm:$false | Out-File -Append -LiteralPath $\
verboseLogFile</TD></TR></TABLE>\l",
		pos="1463,5053.5",
		shape=box,
		width=16.181];
	0914 -> 091420	 [label="True\l",
		lp="1480,5105.5",
		pos="e,1463,5080.2 1463,5130.6 1463,5119.2 1463,5104.1 1463,5090.4"];
	end_0914	 [height=0.5,
		label="End If\l",
		pos="1463,4972",
		shape=mdiamond,
		width=0.84722];
	end_0914 -> end_09	 [pos="e,1463,4917.1 1463,4954 1463,4945.9 1463,4936.2 1463,4927.2"];
	091420 -> end_0914	 [pos="e,1463,4990.5 1463,5026.8 1463,5018.5 1463,5009.2 1463,5000.7"];
	end_010	 [height=0.5,
		label="End If\l",
		pos="2612,774",
		shape=mdiamond,
		width=0.84722];
	011	 [height=0.5,
		label="If $configureNSX -eq 1 -and $DeployNSX -eq 1 -and $setupVXLAN -eq 1\l",
		pos="2612,701",
		shape=diamond,
		width=13.685];
	end_010 -> 011	 [pos="e,2612,719.09 2612,755.96 2612,747.88 2612,738.18 2612,729.18"];
	01011	 [height=0.5,
		label="If $DeploymentTarget -eq \"VMC\"\l",
		pos="1463,4618",
		shape=diamond,
		width=6.5107];
	01010 -> 01011	 [pos="e,1463,4636.1 1463,4672.7 1463,4663.8 1463,4654.6 1463,4646.3"];
	01110	 [height=0.5,
		label="If !(Connect-NSXServer -Server $NSXHostname -Username admin -Password $NSXUIPassword -DisableVIAutoConnect -WarningAction SilentlyContinue)\l",
		pos="2612,614",
		shape=diamond,
		width=28.698];
	011 -> 01110	 [label="True\l",
		lp="2629,657.5",
		pos="e,2612,632 2612,682.97 2612,671.19 2612,655.56 2612,642.16"];
	0101120	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Creating vSphere Cluster $NewVCVSANClusterName ...\"\n        New-Cluster -Server $vc -Name $NewVCVSANClusterName \
-Location (Get-Datacenter -Name $NewVCDatacenterName -Server $vc) -DrsEnabled | Out-File -Append -LiteralPath $verboseLogFile</TD></\
TR></TABLE>\l",
		pos="891,4530",
		shape=box,
		width=22.708];
	01011 -> 0101120	 [label="True\l",
		lp="1246,4574.5",
		pos="e,1014.6,4549 1385,4606 1292.4,4591.8 1136.5,4567.8 1024.6,4550.6"];
	010112130	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Creating VSAN Cluster $NewVCVSANClusterName ...\"\n        New-Cluster -Server $vc -Name $NewVCVSANClusterName \
-Location (Get-Datacenter -Name $NewVCDatacenterName -Server $vc) -DrsEnabled -VsanEnabled -VsanDiskClaimMode 'Manual' | Out-File \
-Append -LiteralPath $verboseLogFile</TD></TR></TABLE>\l",
		pos="2707,4530",
		shape=box,
		width=27.222];
	01011 -> 010112130	 [label="False\l",
		lp="2179,4574.5",
		pos="e,2438.4,4549 1585.1,4609.4 1779.4,4595.6 2164,4568.4 2428.2,4549.7"];
	end_01011	 [height=0.5,
		label="End If\l",
		pos="2023,4456",
		shape=mdiamond,
		width=0.84722];
	01012	 [height=0.5,
		label="If $addESXiHostsToVC -eq 1\l",
		pos="2023,4383",
		shape=diamond,
		width=5.7192];
	end_01011 -> 01012	 [pos="e,2023,4401.1 2023,4438 2023,4429.9 2023,4420.2 2023,4411.2"];
	0101120 -> end_01011	 [pos="e,1992.2,4458 1181.8,4511 1459.9,4492.8 1855.2,4467 1982.1,4458.7"];
	010112130 -> end_01011	 [pos="e,2053.7,4459.3 2531.3,4511 2373.7,4493.9 2153.7,4470.1 2063.8,4460.4"];
	0101220	 [height=2.4167,
		label="<TABLE><TR><TD>$NestedESXiHostnameToIPs.GetEnumerator() | Sort-Object -Property Value | Foreach-Object {\n            $VMName = $_\
.Key\n            $VMIPAddress = $_.Value\n\n            $targetVMHost = $VMIPAddress\n            if($addHostByDnsName -eq 1) {\n                $\
targetVMHost = $VMName\n            }\n            My-Logger \"Adding ESXi host $targetVMHost to Cluster ...\"\n            Add-VMHost \
-Server $vc -Location (Get-Cluster -Name $NewVCVSANClusterName) -User \"root\" -Password $VMPassword -Name $targetVMHost -Force | \
Out-File -Append -LiteralPath $verboseLogFile\n        }</TD></TR></TABLE>\l",
		pos="2023,4227",
		shape=box,
		width=21.111];
	01012 -> 0101220	 [label="True\l",
		lp="2040,4339.5",
		pos="e,2023,4314.2 2023,4364.8 2023,4354.2 2023,4339.9 2023,4324.5"];
	end_01012	 [height=0.5,
		label="End If\l",
		pos="2023,4085",
		shape=mdiamond,
		width=0.84722];
	01013	 [height=0.5,
		label="If $DeployNSX -eq 1 -and $setupVXLAN -eq 1\l",
		pos="2023,4012",
		shape=diamond,
		width=8.8341];
	end_01012 -> 01013	 [pos="e,2023,4030.1 2023,4067 2023,4058.9 2023,4049.2 2023,4040.2"];
	0101220 -> end_01012	 [pos="e,2023,4103.4 2023,4139.9 2023,4130.4 2023,4121.4 2023,4113.4"];
	0101320	 [height=1.5972,
		label="<TABLE><TR><TD>My-Logger \"Creating VDS $VDSName ...\"\n        $vds = New-VDSwitch -Server $vc -Name $VDSName -Location (Get-Datacenter \
-Name $NewVCDatacenterName)\n\n        My-Logger \"Creating new VXLAN DVPortgroup $VXLANDVPortgroup ...\"\n        $vxlanDVPG = New-VDPortgroup \
-Server $vc -Name $VXLANDVPortgroup -Vds $vds\n\n        $vmhosts = Get-Cluster -Server $vc -Name $NewVCVSANClusterName | Get-VMHost</\
TD></TR></TABLE>\l",
		pos="2023,3885.5",
		shape=box,
		width=12.236];
	01013 -> 0101320	 [label="True\l",
		lp="2040,3968.5",
		pos="e,2023,3943.1 2023,3993.9 2023,3983 2023,3968.4 2023,3953.5"];
	end_01013	 [height=0.5,
		label="End If\l",
		pos="2195,3339",
		shape=mdiamond,
		width=0.84722];
	01014	 [height=0.5,
		label="If $configureVSANDiskGroups -eq 1 -and $DeploymentTarget -ne \"VMC\"\l",
		pos="2195,3266",
		shape=diamond,
		width=13.762];
	end_01013 -> 01014	 [pos="e,2195,3284.1 2195,3321 2195,3312.9 2195,3303.2 2195,3294.2"];
	0101321	 [height=0.5,
		label="Foreach $vmhosts\l",
		pos="2023,3773",
		width=2.672];
	0101320 -> 0101321	 [pos="e,2023,3791.1 2023,3827.9 2023,3818.6 2023,3809.3 2023,3801.1"];
	0101420	 [height=0.52778,
		label="<TABLE><TR><TD>My-Logger \"Enabling VSAN Space Efficiency/De-Dupe & disabling VSAN Health Check ...\"\n        Get-VsanClusterConfiguration \
-Server $vc -Cluster $NewVCVSANClusterName | Set-VsanClusterConfiguration -SpaceEfficiencyEnabled $true -HealthCheckIntervalMinutes \
0 | Out-File -Append -LiteralPath $verboseLogFile</TD></TR></TABLE>\l",
		pos="2195,3178",
		shape=box,
		width=25.556];
	01014 -> 0101420	 [label="True\l",
		lp="2212,3222.5",
		pos="e,2195,3197.1 2195,3247.8 2195,3236.1 2195,3220.7 2195,3207.3"];
	010132130	 [height=3.2917,
		label="<TABLE><TR><TD>$vmhostname = $vmhost.name\n\n            My-Logger \"Adding $vmhostname to VDS ...\"\n            Add-VDSwitchVMHost \
-Server $vc -VDSwitch $vds -VMHost $vmhost | Out-File -Append -LiteralPath $verboseLogFile\n\n            My-Logger \"Adding vmmnic1 \
to VDS ...\"\n            $vmnic = $vmhost | Get-VMHostNetworkAdapter -Physical -Name vmnic1\n            Add-VDSwitchPhysicalNetworkAdapter \
-Server $vc -DistributedSwitch $vds -VMHostPhysicalNic $vmnic -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile\n\n            $\
vmk0 = Get-VMHostNetworkAdapter -Server $vc -Name vmk0 -VMHost $vmhost\n            $lastNetworkOcet = $vmk0.ip.Split('.')[-1]\n            $\
vxlanVmkIP = $VXLANSubnet + $lastNetworkOcet\n\n            My-Logger \"Adding VXLAN VMKernel $vxlanVmkIP to VDS ...\"\n            \
New-VMHostNetworkAdapter -VMHost $vmhost -PortGroup $VXLANDVPortgroup -VirtualSwitch $vds -IP $vxlanVmkIP -SubnetMask $VXLANNetmask \
-Mtu 1600 | Out-File -Append -LiteralPath $verboseLogFile</TD></TR></TABLE>\l",
		pos="1338,3599.5",
		shape=box,
		width=24.611];
	0101321 -> 010132130	 [pos="e,1806,3718 1965.8,3758.5 1928.3,3749 1875.4,3735.6 1816,3720.6"];
	loop_0101321	 [height=0.5,
		label="Next item In $vmhosts\l",
		pos="2195,3426",
		shape=ellipse,
		width=3.2858];
	010132130 -> loop_0101321	 [pos="e,2123.7,3440.4 1923.5,3481 1997.9,3465.9 2065,3452.3 2113.9,3442.4"];
	loop_0101321 -> end_01013	 [label="Loop End\l",
		lp="2229.5,3382.5",
		pos="e,2195,3357 2195,3408 2195,3396.2 2195,3380.6 2195,3367.2"];
	loop_0101321 -> 0101321	 [pos="e,2101.4,3762.5 2211.5,3443.8 2219.7,3453.9 2228.7,3467.3 2233,3481 2264.4,3581.6 2297.4,3634.6 2233,3718 2217.7,3737.8 2161.7,3751.9 \
2111.4,3760.8"];
	end_01014	 [height=0.5,
		label="End If\l",
		pos="2194,2137",
		shape=mdiamond,
		width=0.84722];
	01015	 [height=0.5,
		label="If $clearVSANHealthCheckAlarm -eq 1 -and $DeploymentTarget -ne \"VMC\"\l",
		pos="2194,2064",
		shape=diamond,
		width=14.324];
	end_01014 -> 01015	 [pos="e,2194,2082.1 2194,2119 2194,2110.9 2194,2101.2 2194,2092.2"];
	0101421	 [height=0.5,
		label="Foreach Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2195,3104",
		width=6.3369];
	0101420 -> 0101421	 [pos="e,2195,3122.2 2195,3158.9 2195,3150.8 2195,3141.2 2195,3132.2"];
	0101520	 [height=1.7778,
		label="<TABLE><TR><TD>My-Logger \"Clearing default VSAN Health Check Alarms, not applicable in Nested ESXi env ...\"\n        $alarmMgr = \
Get-View AlarmManager -Server $vc\n        Get-Cluster -Server $vc | where {$_.ExtensionData.TriggeredAlarmState} | %{\n            $\
cluster = $_\n            $Cluster.ExtensionData.TriggeredAlarmState | %{\n                $alarmMgr.AcknowledgeAlarm($_.Alarm,$\
cluster.ExtensionData.MoRef)\n            }\n        }</TD></TR></TABLE>\l",
		pos="2194,1931",
		shape=box,
		width=12.111];
	01015 -> 0101520	 [label="True\l",
		lp="2211,2020.5",
		pos="e,2194,1995.3 2194,2045.8 2194,2035 2194,2020.6 2194,2005.7"];
	010142130	 [height=0.75,
		label="<TABLE><TR><TD>$luns = $vmhost | Get-ScsiLun | select CanonicalName, CapacityGB\n\n            My-Logger \"Querying ESXi host disks \
to create VSAN Diskgroups ...\"</TD></TR></TABLE>\l",
		pos="1880,3022",
		shape=box,
		width=10.403];
	0101421 -> 010142130	 [pos="e,1983.8,3049 2128.6,3086.7 2089.5,3076.5 2039,3063.4 1993.7,3051.6"];
	010142131	 [height=0.5,
		label="Foreach $luns\l",
		pos="1799,2940",
		width=2.1304];
	010142130 -> 010142131	 [pos="e,1816.7,2957.9 1853,2994.7 1843.6,2985.1 1833,2974.5 1823.8,2965.1"];
	loop_0101421	 [height=0.5,
		label="Next item In Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2194,2224",
		shape=ellipse,
		width=6.9508];
	loop_0101421 -> end_01014	 [label="Loop End\l",
		lp="2228.5,2180.5",
		pos="e,2194,2155 2194,2206 2194,2194.2 2194,2178.6 2194,2165.2"];
	loop_0101421 -> 0101421	 [pos="e,2251.7,3086.6 2252.2,2241.6 2280.7,2254.1 2309,2274.4 2309,2305.5 2309,3022 2309,3022 2309,3022 2309,3049.9 2286.2,3069.2 2261,\
3082.1"];
	01014213140	 [height=0.5,
		label="If ([int]($lun.CapacityGB)).toString() -eq \"$NestedESXiCachingvDisk\"\l",
		pos="1799,2867",
		shape=diamond,
		width=13.251];
	010142131 -> 01014213140	 [pos="e,1799,2885.1 1799,2922 1799,2913.9 1799,2904.2 1799,2895.2"];
	0101421314050	 [height=0.5,
		label="<TABLE><TR><TD>$vsanCacheDisk = $lun.CanonicalName</TD></TR></TABLE>\l",
		pos="1799,2780",
		shape=box,
		width=8.9861];
	01014213140 -> 0101421314050	 [label="True\l",
		lp="1816,2823.5",
		pos="e,1799,2798 1799,2849 1799,2837.2 1799,2821.6 1799,2808.2"];
	loop_010142131	 [height=0.5,
		label="Next item In $luns\l",
		pos="1496,2401",
		shape=ellipse,
		width=2.7442];
	loop_010142131 -> 010142131	 [pos="e,1723.5,2936.8 1421.9,2412.9 1362.5,2424.6 1289,2444.9 1289,2474 1289,2867 1289,2867 1289,2867 1289,2909.3 1568,2929 1713.2,2936.3"];
	010142132	 [height=0.73611,
		label="<TABLE><TR><TD>}\n            My-Logger \"Creating VSAN DiskGroup for $vmhost ...\"\n            New-VsanDiskGroup -Server $vc -VMHost $\
vmhost -SsdCanonicalName $vsanCacheDisk -DataDiskCanonicalName $vsanCapacityDisk | Out-File -Append -LiteralPath $verboseLogFile</\
TD></TR></TABLE>\l",
		pos="1496,2305.5",
		shape=box,
		width=21.806];
	loop_010142131 -> 010142132	 [label="Loop End\l",
		lp="1530.5,2357.5",
		pos="e,1496,2332.2 1496,2382.6 1496,2371.2 1496,2356.1 1496,2342.4"];
	010142132 -> loop_0101421	 [pos="e,2062.7,2239.3 1723.1,2279 1831.6,2266.3 1958,2251.6 2052.5,2240.5"];
	end_01014213140	 [height=0.5,
		label="End If\l",
		pos="1799,2707",
		shape=mdiamond,
		width=0.84722];
	01014213141	 [height=0.5,
		label="If ([int]($lun.CapacityGB)).toString() -eq \"$NestedESXiCapacityvDisk\"\l",
		pos="1799,2634",
		shape=diamond,
		width=13.379];
	end_01014213140 -> 01014213141	 [pos="e,1799,2652.1 1799,2689 1799,2680.9 1799,2671.2 1799,2662.2"];
	0101421314050 -> end_01014213140	 [pos="e,1799,2725.1 1799,2762 1799,2753.9 1799,2744.2 1799,2735.2"];
	0101421314150	 [height=0.5,
		label="<TABLE><TR><TD>$vsanCapacityDisk = $lun.CanonicalName</TD></TR></TABLE>\l",
		pos="1687,2547",
		shape=box,
		width=9.25];
	01014213141 -> 0101421314150	 [label="True\l",
		lp="1767,2590.5",
		pos="e,1710.2,2565.1 1776.9,2616.8 1760.1,2603.8 1736.8,2585.7 1718.2,2571.2"];
	end_01014213141	 [height=0.5,
		label="End If\l",
		pos="1572,2474",
		shape=mdiamond,
		width=0.84722];
	end_01014213141 -> loop_010142131	 [pos="e,1514.6,2418.8 1553.2,2456 1543.7,2446.8 1532.1,2435.7 1521.8,2425.8"];
	0101421314150 -> end_01014213141	 [pos="e,1600.5,2492.1 1658.6,2529 1643.6,2519.5 1625.2,2507.8 1609.1,2497.6"];
	end_01015	 [height=0.5,
		label="End If\l",
		pos="2194,1812",
		shape=mdiamond,
		width=0.84722];
	01016	 [height=0.5,
		label="If $configurevMotion -eq 1\l",
		pos="2194,1739",
		shape=diamond,
		width=5.3107];
	end_01015 -> 01016	 [pos="e,2194,1757.1 2194,1794 2194,1785.9 2194,1776.2 2194,1767.2"];
	0101520 -> end_01015	 [pos="e,2194,1830.4 2194,1867 2194,1857.7 2194,1848.7 2194,1840.6"];
	0101620	 [height=0.5,
		label="<TABLE><TR><TD>My-Logger \"Enabling vMotion on ESXi hosts ...\"</TD></TR></TABLE>\l",
		pos="2194,1652",
		shape=box,
		width=9.75];
	01016 -> 0101620	 [label="True\l",
		lp="2211,1695.5",
		pos="e,2194,1670 2194,1721 2194,1709.2 2194,1693.6 2194,1680.2"];
	end_01016	 [height=0.5,
		label="End If\l",
		pos="2387,1346",
		shape=mdiamond,
		width=0.84722];
	01017	 [height=0.5,
		label="Foreach Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2387,1273",
		width=6.3369];
	end_01016 -> 01017	 [pos="e,2387,1291.1 2387,1328 2387,1319.9 2387,1310.2 2387,1301.2"];
	0101621	 [height=0.5,
		label="Foreach Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2194,1579",
		width=6.3369];
	0101620 -> 0101621	 [pos="e,2194,1597.1 2194,1634 2194,1625.9 2194,1616.2 2194,1607.2"];
	0101720	 [height=0.5,
		label="If $vmhost.ConnectionState -eq \"Maintenance\"\l",
		pos="2130,1200",
		shape=diamond,
		width=9.0894];
	01017 -> 0101720	 [pos="e,2183.4,1215.2 2325.8,1255.6 2285.7,1244.2 2233.5,1229.4 2193.1,1217.9"];
	010162130	 [height=0.5,
		label="<TABLE><TR><TD>$vmhost | Get-VMHostNetworkAdapter -VMKernel | Set-VMHostNetworkAdapter -VMotionEnabled $true -Confirm:$false | Out-File \
-Append -LiteralPath $verboseLogFile</TD></TR></TABLE>\l",
		pos="1598,1506",
		shape=box,
		width=21.903];
	0101621 -> 010162130	 [pos="e,1745.1,1524 2070.1,1563.8 1978.7,1552.6 1853.6,1537.3 1755.2,1525.2"];
	loop_0101621	 [height=0.5,
		label="Next item In Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2387,1433",
		shape=ellipse,
		width=6.9508];
	010162130 -> loop_0101621	 [pos="e,2233.3,1447.2 1792.8,1488 1925.1,1475.7 2098.1,1459.7 2223.2,1448.2"];
	loop_0101621 -> end_01016	 [label="Loop End\l",
		lp="2421.5,1389.5",
		pos="e,2387,1364 2387,1415 2387,1403.2 2387,1387.6 2387,1374.2"];
	loop_0101621 -> 0101621	 [pos="e,2296.1,1562.8 2395.2,1451.1 2402.9,1471 2411,1503.1 2395,1524 2383.1,1539.5 2345.5,1551.8 2305.9,1560.7"];
	010172030	 [height=0.5,
		label="<TABLE><TR><TD>Set-VMHost -VMhost $vmhost -State Connected -RunAsync -Confirm:$false | Out-File -Append -LiteralPath $verboseLogFile</\
TD></TR></TABLE>\l",
		pos="1981,1113",
		shape=box,
		width=17.319];
	0101720 -> 010172030	 [label="True\l",
		lp="2082,1156.5",
		pos="e,2011.8,1131 2101.6,1183.4 2078.7,1170 2046.1,1151 2020.5,1136.1"];
	loop_01017	 [height=0.5,
		label="Next item In Get-Cluster -Server $vc | Get-VMHost\l",
		pos="2612,967",
		shape=ellipse,
		width=6.9508];
	loop_01017 -> 01017	 [pos="e,2510.4,1257.8 2620.3,985.19 2626.2,999.71 2633,1020.7 2633,1040 2633,1200 2633,1200 2633,1200 2633,1226.9 2578.3,1244.7 2520.4,\
1255.9"];
	01018	 [height=0.95833,
		label="<TABLE><TR><TD>}\n\n    My-Logger \"Disconnecting from new VCSA ...\"\n    Disconnect-VIServer $vc -Confirm:$false</TD></TR></TABLE>\l",
		pos="2612,863.5",
		shape=box,
		width=7.0139];
	loop_01017 -> 01018	 [label="Loop End\l",
		lp="2646.5,923.5",
		pos="e,2612,898.04 2612,948.97 2612,937.69 2612,922.63 2612,908.29"];
	01018 -> end_010	 [pos="e,2612,792 2612,828.9 2612,820.04 2612,810.63 2612,802.14"];
	end_0101720	 [height=0.5,
		label="End If\l",
		pos="2278,1040",
		shape=mdiamond,
		width=0.84722];
	end_0101720 -> loop_01017	 [pos="e,2533.6,984.13 2308.5,1033.3 2356.8,1022.8 2452.7,1001.8 2523.8,986.28"];
	010172030 -> end_0101720	 [pos="e,2247.3,1047.5 2054.4,1095 2112.2,1080.8 2190.5,1061.5 2237.5,1050"];
	end_011	 [height=0.5,
		label="End If\l",
		pos="3464,91",
		shape=mdiamond,
		width=0.84722];
	end_011 -> end_of_script	 [pos="e,3667.2,31.897 3494.8,82.049 3535.2,70.306 3606.8,49.467 3657.4,34.754"];
	0111020	 [height=0.5,
		label="<TABLE><TR><TD>Write-Host -ForegroundColor Red \"Unable to connect to NSX Manager, please check the deployment\"</TD></TR></TABLE>\l",
		pos="3142,527",
		shape=box,
		width=15.139];
	01110 -> 0111020	 [label="True\l",
		lp="2926,570.5",
		pos="e,3032.1,545.04 2711.4,597.69 2799.4,583.23 2928.2,562.09 3022,546.7"];
	011102230	 [height=0.5,
		label="<TABLE><TR><TD>My-Logger \"Successfully logged into NSX Manager $NSXHostname ...\"</TD></TR></TABLE>\l",
		pos="2630,473",
		shape=box,
		width=12.111];
	01110 -> 011102230	 [label="False\l",
		lp="2612,570.5",
		pos="e,2601.9,491.14 2601,595.81 2589.5,574.27 2574.8,537.71 2588,509 2589.7,505.28 2592,501.8 2594.7,498.58"];
	end_01110	 [height=0.5,
		label="End If\l",
		pos="3061,346",
		shape=mdiamond,
		width=0.84722];
	01111	 [height=2.0139,
		label="<TABLE><TR><TD>$ssoUsername = \"administrator@$VCSASSODomainName\"\n    My-Logger \"Registering NSX Manager with vCenter Server $VCSAHostname \
...\"\n    $vcConfig = Set-NsxManager -vCenterServer $VCSAHostname -vCenterUserName $ssoUsername -vCenterPassword $VCSASSOPassword\n\n    \
My-Logger \"Registering NSX Manager with vCenter SSO $VCSAHostname ...\"\n    $ssoConfig = Set-NsxManager -SsoServer $VCSAHostname \
-SsoUserName $ssoUsername -SsoPassword $VCSASSOPassword -AcceptAnyThumbprint\n\n    My-Logger \"Disconnecting from NSX Manager ...\"\n    \
Disconnect-NsxServer</TD></TR></TABLE>\l",
		pos="3061,218.5",
		shape=box,
		width=15.556];
	end_01110 -> 01111	 [pos="e,3061,291.02 3061,327.73 3061,320.24 3061,311.01 3061,301.11"];
	0111021	 [height=0.5,
		label="Exit\l",
		pos="3142,419",
		width=0.83048];
	0111020 -> 0111021	 [pos="e,3142,437.05 3142,508.68 3142,491.82 3142,466.57 3142,447.15"];
	011102230 -> end_01110	 [pos="e,3030.3,355.03 2691.3,454.94 2780.8,428.56 2944.9,380.21 3020.7,357.88"];
	01111 -> end_011	 [pos="e,3433.2,100.74 3290.2,146 3341.7,129.69 3390.8,114.16 3423.6,103.79"];
	0111021 -> end_of_script	 [label="Exit\l",
		lp="3672,218.5",
		pos="e,3690.4,35.141 3171.9,417.94 3281.8,413.63 3657,395.33 3657,346 3657,346 3657,346 3657,91 3657,71.743 3669.5,54.618 3682.9,41.804"];
	0111021 -> end_01110	 [pos="e,3081.2,364.21 3125.2,403.87 3114.7,394.42 3101,382.01 3088.9,371.11",
		style=dotted];
}
